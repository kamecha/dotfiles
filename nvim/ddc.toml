# 補完plugin
[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim']
on_event = ['InsertEnter']
lua_source = '''
if vim.fn.has('wsl') == 1 then
	vim.opt_local.dictionary:append('/usr/share/dict/american-english')
	vim.fn["ddc#custom#patch_global"]({
		sourceParams = {
			dictionary = {
				paths = { '/usr/share/dict/american-english' }
			}
		},
		filterParams = {
			converter_dictionary = {
				dicts = { vim.g.github_dir .. "/gunyarakun/kantan-ej-dictionary/kantan-ej-dictionary.json" }
			}
		}
	})
end

vim.fn["ddc#custom#patch_global"]({
	ui = "native",
	sources = { "around", "lsp", "vsnip", "file", "dictionary" },
	sourceOptions = {
		around = { mark = "A" },
		["lsp"] = {
			mark = "lsp",
			dup = "force",
			keywordPattern = "\\k+",
			forceCompletionPattern = "\\.\\w*|::",
			matchers = { "matcher_fuzzy" },
			sorters = { "sorter_fuzzy" },
			converters = { "converter_fuzzy", "converter_kind_labels" }
		},
		dictionary = {
			mark = "Dic",
			minKeywordLength = 4,
			converters = { "converter_fuzzy", "converter_dictionary" }
		},
		vsnip = { mark = "Snip", dup = "keep" },
		file = {
			mark = "F",
			isVolatile = true,
			forceCompletionPattern = "\\S/\\S*"
		},
		cmdline = { mark = "cmd" },
		["cmdline-history"] = { mark = "his", dup = "ignore" },
		input = { mark = "in", isVolatile = true },
		skkeleton = {
			mark = "skkeleton",
			matchers = {},
			sorters = {},
			minAutoCompleteLength = 0,
			isVolatile = true
		},
		_ = {
			matchers = { "matcher_fuzzy" },
			sorters = { "sorter_fuzzy" },
			converters = { "converter_fuzzy" }
		}
	},
	sourceParams = {
		["lsp"] = {
			enableResolveItem = true,
			enableAdditionalTextEdit = true,
			confirmBehavior = "replace",
			snippetEngine = vim.fn["denops#callback#register"](function(body)
				vim.fn["vsnip#anonymous"](body)
			end)
		},
		file = {
			mode = "os"
		},
	},
	filterParams = {
		converter_fuzzy = {
			hlGroup = "Blue"
		},
		-- lspのkindのVSCode-likeなアイコンを表示する
		-- https://code.visualstudio.com/docs/editor/intellisense#_types-of-completions
		converter_kind_labels = {
			kindLabels = {
				Text = "",
				Method = "",
				Function = "",
				Constructor = "",
				Field = "",
				Variable = "",
				Class = "",
				Interface = "",
				Module = "",
				Property = "",
				Unit = "",
				Value = "",
				Enum = "",
				Keyword = "",
				Snippet = "",
				Color = "",
				File = "",
				Reference = "",
				Folder = "",
				EnumMember = "",
				Constant = "",
				Struct = "",
				Event = "",
				Operator = "",
				TypeParameter = ""
			},
			kindHlGroups = {
				Method = "Function",
				Function = "Function",
				Constructor = "Function",
				Field = "Identifier",
				Variable = "Identifier",
				Class = "Structure",
				Interface = "Structure",
				Module = "Structure",
				Property = "Identifier",
				Value = "Type",
				Enum = "Type",
				File = "Structure",
				Event = "Type"
			}
		},
	},
	autoCompleteEvents = {
		"InsertEnter",
		"TextChangedI", "TextChangedP",
	},
})

vim.fn["ddc#custom#patch_filetype"]("gina-commit", {
	specialBufferCompletion = true,
})
vim.fn["ddc#custom#patch_filetype"]("traqvim-message", {
	sources = { "stamp" },
	sourceOptions = {
		stamp = {
			mark = "stamp",
			matchers = { "matcher_fuzzy" },
			keywordPattern = "[a-zA-Z_:]\\w*",
		}
	},
	specialBufferCompletion = true,
})

vim.fn["ddc#enable"]()
'''

# 補完UI
[[plugins]]
repo = 'Shougo/ddc-ui-native'
on_source = 'ddc.vim'

# 補完source
[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-lsp'
depends = ['denops.vim', 'ddc.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'uga-rosa/ddc-source-dictionary'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-source-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-input'
on_source = 'ddc.vim'

# 補完filter
[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'atusy/ddc-filter-converter_dictionary'
on_source = 'ddc.vim'

# converter_dictionaryで使う辞書
[[plugins]]
repo = 'gunyarakun/kantan-ej-dictionary'

[[plugins]]
repo = 'dwyl/english-words'

# スニペット
[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_source = 'ddc.vim'
lua_add = '''
vim.keymap.set('i', '<Tab>', function()
	if vim.fn["vsnip#jumpable"](1) == 1 then
		return "<Plug>(vsnip-jump-next)"
	else
		return "<Tab>"
	end
end, { remap = true, expr = true })
vim.keymap.set('i', '<S-Tab>', function()
	if vim.fn["vsnip#jumpable"](-1) == 1 then
		return "<Plug>(vsnip-jump-prev)"
	else
		return "<S-Tab>"
	end
end, { remap = true, expr = true })
vim.keymap.set('s', '<Tab>', function()
	if vim.fn["vsnip#jumpable"](1) == 1 then
		return "<Plug>(vsnip-jump-next)"
	else
		return "<Tab>"
	end
end, { remap = true, expr = true })
vim.keymap.set('s', '<S-Tab>', function()
	if vim.fn["vsnip#jumpable"](-1) == 1 then
		return "<Plug>(vsnip-jump-prev)"
	else
		return "<S-Tab>"
	end
end, { remap = true, expr = true })
'''

[[plugins]]
repo = 'uga-rosa/ddc-source-vsnip'
depends = ['vim-vsnip']
on_source = 'ddc.vim'

# SKK
[[plugins]]
repo = 'vim-skk/skkeleton'
on_map = { 'ic' = '<Plug>(skkeleton-toggle)'}
depends = ['ddc.vim']
lua_add = '''
vim.keymap.set('i', '<C-j>', '<Plug>(skkeleton-toggle)', { remap = true })
vim.keymap.set('c', '<C-j>', '<Plug>(skkeleton-toggle)', { remap = true })
'''
lua_source = '''
vim.fn["skkeleton#config"]({
	globalDictionaries = {
		{ vim.fn.expand(vim.g.github_dir .. "/skk-dev/dict/SKK-JISYO.L"), "euc-jp" },
		{ vim.fn.expand(vim.g.rc_dir .. "/SKK-JISYO.nicoime"),            "utf-16le" },
	},
	registerConvertResult = true,
})
-- `l`で変換モードの変化を無効化
vim.g["skkeleton#mapped_keys"] = vim.fn.extend(vim.g["skkeleton#mapped_keys"], {"<C-l>"})
vim.fn["skkeleton#register_keymap"]("input", "<C-l>", "disable")
vim.fn["skkeleton#register_kanatable"]("rom", {
	l = false,
})
-- `:`で「っ」の入力
vim.fn["skkeleton#register_kanatable"]("rom", {
	[":"] = { "っ" },
})
-- シャ・チャ行の入力
vim.fn["skkeleton#register_kanatable"]("rom", {
	xa = { "しゃ" },
	xu = { "しゅ" },
	xe = { "しぇ" },
	xo = { "しょ" },
	xz = { "しゃん" },
	xn = { "しゅん" },
	xj = { "しゅん" },
	xd = { "しぇん" },
	xl = { "しょん" },
	xq = { "しゃい" },
	xh = { "しゅう" },
	xw = { "しぇい" },
	xp = { "しょう" },
	ca = { "ちゃ" },
	cu = { "ちゅ" },
	ce = { "ちぇ" },
	co = { "ちょ" },
	cz = { "ちゃん" },
	cn = { "ちゃん" },
	cj = { "ちゅん" },
	cd = { "ちぇん" },
	cl = { "ちょん" },
	cq = { "ちゃい" },
	ch = { "ちゅう" },
	cw = { "ちぇい" },
	cp = { "ちょう" },
})
-- 「ん」の入力
vim.fn["skkeleton#register_kanatable"]("rom", {
	Q = { "ん" },
})
-- 特殊な拗音の入力
vim.fn["skkeleton#register_kanatable"]("rom", {
	la = { "ぁ" },
	li = { "ぃ" },
	lu = { "ぅ" },
	le = { "ぇ" },
	lo = { "ぉ" },
	lya = { "ゃ" },
	lyu = { "ゅ" },
	lyo = { "ょ" },
})
-- 撥音拡張
vim.fn["skkeleton#register_kanatable"]("rom", {
	kz = { "かん" },
	kn = { "かん" },
	kk = { "きん" },
	kj = { "くん" },
	kd = { "けん" },
	kl = { "こん" },
	sz = { "さん" },
	sn = { "さん" },
	sk = { "しん" },
	sj = { "すん" },
	sd = { "せん" },
	sl = { "そん" },
	tz = { "たん" },
	tn = { "たん" },
	tk = { "ちん" },
	tj = { "つん" },
	td = { "てん" },
	tl = { "とん" },
	nz = { "なん" },
	nn = { "ん" },
	nk = { "にん" },
	nj = { "ぬん" },
	nd = { "ねん" },
	nl = { "のん" },
	hz = { "はん" },
	hn = { "はん" },
	hk = { "ひん" },
	hj = { "ふん" },
	hd = { "へん" },
	hl = { "ほん" },
	fz = { "ふぁん" },
	fn = { "ふぁん" },
	fk = { "ふぃん" },
	fj = { "ふん" },
	fd = { "ふぇん" },
	fl = { "ふぉん" },
	mz = { "まん" },
	mn = { "まん" },
	mk = { "みん" },
	mj = { "むん" },
	md = { "めん" },
	ml = { "もん" },
	yz = { "やん" },
	yn = { "やん" },
	yk = { "いん" },
	yj = { "ゆん" },
	yd = { "えん" },
	yl = { "よん" },
	rz = { "らん" },
	rn = { "らん" },
	rk = { "りん" },
	rj = { "るん" },
	rd = { "れん" },
	rl = { "ろん" },
	wz = { "わん" },
	wn = { "わん" },
	wk = { "うぃん" },
	wj = { "うん" },
	wd = { "うぇん" },
	wl = { "うぉん" },
	-- 濁音、半濁音、撥音拡張
	gz = { "がん" },
	gn = { "がん" },
	gk = { "ぎん" },
	gj = { "ぐん" },
	gd = { "げん" },
	gl = { "ごん" },
	zz = { "ざん" },
	zn = { "ざん" },
	zk = { "じん" },
	zj = { "ずん" },
	zd = { "ぜん" },
	zl = { "ぞん" },
	jk = { "じん" },
	dz = { "だん" },
	dn = { "だん" },
	dk = { "ぢん" },
	dj = { "づん" },
	dd = { "でん" },
	dl = { "どん" },
	bz = { "ばん" },
	bn = { "ばん" },
	bk = { "びん" },
	bj = { "ぶん" },
	bd = { "べん" },
	bl = { "ぼん" },
	pz = { "ぱん" },
	pn = { "ぱん" },
	pk = { "ぴん" },
	pj = { "ぷん" },
	pd = { "ぺん" },
	pl = { "ぽん" },
	-- 拗音、撥音拡張
	kyz = { "きゃん" },
	kyn = { "きゃん" },
	kyj = { "きゅん" },
	kyd = { "きぇん" },
	kyl = { "きょん" },
	syz = { "しゃん" },
	syn = { "しゃん" },
	syj = { "しゅん" },
	syd = { "しぇん" },
	syl = { "しょん" },
	tyz = { "ちゃん" },
	tyn = { "ちゃん" },
	tyj = { "ちゅん" },
	tyd = { "ちぇん" },
	tyl = { "ちょん" },
	cz = { "ちゃん" },
	cn = { "ちゃん" },
	cj = { "ちゅん" },
	cd = { "ちぇん" },
	cl = { "ちょん" },
	nyz = { "にゃん" },
	nyn = { "にゃん" },
	nyj = { "にゅん" },
	nyd = { "にぇん" },
	nyl = { "にょん" },
	hyz = { "ひゃん" },
	hyn = { "ひゃん" },
	hyj = { "ひゅん" },
	hyd = { "ひぇん" },
	hyl = { "ひょん" },
	myz = { "みゃん" },
	myn = { "みゃん" },
	myj = { "みゅん" },
	myd = { "みぇん" },
	myl = { "みょん" },
	ryz = { "りゃん" },
	ryn = { "りゃん" },
	ryj = { "りゅん" },
	ryd = { "りぇん" },
	ryl = { "りょん" },
	-- 濁音
	gyz = { "ぎゃん" },
	gyn = { "ぎゃん" },
	gyj = { "ぎゅん" },
	gyd = { "ぎぇん" },
	gyl = { "ぎょん" },
	zyz = { "じゃん" },
	zyn = { "じゃん" },
	zyj = { "じゅん" },
	zyd = { "じぇん" },
	zyl = { "じょん" },
	jz = { "じゃん" },
	jn = { "じゃん" },
	jj = { "じゅん" },
	jd = { "じぇん" },
	jl = { "じょん" },
	byz = { "びゃん" },
	byn = { "びゃん" },
	byj = { "びゅん" },
	byd = { "びぇん" },
	byl = { "びょん" },
	pyz = { "ぴゃん" },
	pyn = { "ぴゃん" },
	pyj = { "ぴゅん" },
	pyd = { "ぴぇん" },
	pyl = { "ぴょん" },
})
-- 二重母音拡張
vim.fn["skkeleton#register_kanatable"]("rom", {
	kq = { "かい" },
	kh = { "くう" },
	kw = { "けい" },
	kp = { "こう" },
	sq = { "さい" },
	sh = { "すう" },
	sw = { "せい" },
	sp = { "そう" },
	tq = { "たい" },
	th = { "つう" },
	tw = { "てい" },
	tp = { "とう" },
	nq = { "ない" },
	nh = { "ぬう" },
	nw = { "ねい" },
	np = { "のう" },
	hq = { "はい" },
	hh = { "ふう" },
	hw = { "へい" },
	hp = { "ほう" },
	fq = { "ふぁい" },
	fh = { "ふう" },
	fw = { "ふぇい" },
	fp = { "ふぉー" },
	mq = { "まい" },
	mh = { "むう" },
	mw = { "めい" },
	mp = { "もう" },
	yq = { "やい" },
	yh = { "ゆう" },
	yw = { "いい" },
	yp = { "よう" },
	rq = { "らい" },
	rh = { "るう" },
	rw = { "れい" },
	rp = { "ろう" },
	wq = { "わい" },
	wp = { "うぉー" },
})
-- AZIK設定で追い遣られた入力
vim.fn["skkeleton#register_kanatable"]("rom", {
	["z<"] = { "←" },
	["zv"] = { "↓" },
	["z^"] = { "↑" },
	["z>"] = { "→" },
	["z:"] = { "：" },
})
vim.api.nvim_create_autocmd({ "User" }, {
	group = "MyAutoCmd",
	pattern = "skkeleton-enable-pre",
	callback = function()
		vim.b.prev_buffer_config = vim.fn["ddc#custom#get_buffer"]()
		vim.fn["ddc#custom#patch_buffer"]({
			sources = {
				"around",
				{
					name = "skkeleton",
					options = { keywordPattern = "([ァ-ヮア-ン]|ー)+" },
				},
			},
		})
	end
})
vim.api.nvim_create_autocmd({ "User" }, {
	group = "MyAutoCmd",
	pattern = "skkeleton-disable-pre",
	callback = function()
		vim.fn["ddc#custom#set_buffer"](vim.b.prev_buffer_config)
	end
})
vim.api.nvim_create_autocmd({ "InsertLeave" }, {
	group = "MyAutoCmd",
	pattern = "*",
	callback = function()
		vim.cmd("mode")
	end
})
'''

# skk の表示をリッチにするやつ
[[plugins]]
repo = 'delphinus/skkeleton_indicator.nvim'
on_source = 'skkeleton'
lua_source = '''
local skkeleton_indicator = require('skkeleton_indicator')
skkeleton_indicator.setup({
	alwaysShown = false,
	fadeOutMs = 0,
})
'''
