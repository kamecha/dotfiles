# 補完plugin
[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim', 'pum.vim']
on_event = ['InsertEnter', 'CmdlineEnter']
hook_source = '''
setlocal dictionary+=/usr/share/dict/american-english
let s:ddc_config_json =<< trim MARK
	{
		"ui": "pum",
		"sources": ["around", "nvim-lsp", "dictionary", "vsnip"],
		"sourceOptions": {
			"around": {
				"mark": "A"
			},
			"nvim-lsp": {
				"mark": "lsp",
				"dup": "force",
				"keywordPattern": "\\k+",
				"forceCompletionPattern": "\\.\\w*|::",
				"matchers": ["matcher_fuzzy"],
				"sorters": ["sorter_fuzzy"],
				"converters": ["converter_fuzzy", "converter_kind_labels"]
			},
			"dictionary": {
				"mark": "Dic",
				"minKeywordLength": 4,
				"converters": ["converter_fuzzy", "converter_dictionary"]
			},
			"vsnip": {
				"mark": "vsnip",
				"dup": "keep"
			},
			"cmdline": {
				"mark": "cmd"
			},
			"cmdline-history": {
				"mark": "his",
				"dup": "ignore"
			},
			"input": {
				"mark": "in",
				"isVolatile": true
			},
			"skkeleton": {
				"mark": "skkeleton",
				"matchers": ["skkeleton"],
				"sorters": [],
				"minAutoCompleteLength": 0,
				"isVolatile": 1
			},
			"_": {
				"matchers": ["matcher_fuzzy"],
				"sorters": ["sorter_fuzzy"],
				"converters": ["converter_fuzzy"]
			}
		},
		"sourceParams": {
			"nvim-lsp": {
				"enableResolveItem": true,
				"enableAdditionalTextEdit": true,
				"confirmBehavior": "replace"
			},
			"dictionary": {
				"smartCase": true,
				"isVolatile": true
			}
		},
		"filterParams": {
			"converter_kind_labels": {
				"kindLabels": {
					"Text": "",
					"Method": "",
					"Function": "",
					"Constructor": "",
					"Field": "",
					"Variable": "",
					"Class": "",
					"Interface": "",
					"Module": "",
					"Property": "",
					"Unit": "",
					"Value": "",
					"Enum": "",
					"Keyword": "",
					"Snippet": "",
					"Color": "",
					"File": "",
					"Reference": "",
					"Folder": "",
					"EnumMember": "",
					"Constant": "",
					"Struct": "",
					"Event": "",
					"Operator": "",
					"TypeParameter": ""
				},
				"kindHlGroups": {
					"Method": "Function",
					"Function": "Function",
					"Constructor": "Function",
					"Field": "Identifier",
					"Variable": "Identifier",
					"Class": "Structure",
					"Interface": "Structure",
					"Module": "Structure",
					"Property": "Identifier",
					"Value": "Type",
					"Enum": "Type",
					"File": "Structure",
					"Event": "Type"
				}
			}
		},
		"autoCompleteEvents": [
			"InsertEnter", 
			"TextChangedI", "TextChangedP",
			"CmdlineChanged", "CmdlineEnter"
		],
		"cmdlineSources": {
			":": ["cmdline", "cmdline-history"],
			"@": ["input", "around"]
		}
	}
MARK

" lspのkindのVSCode-likeなアイコンを表示する
" https://code.visualstudio.com/docs/editor/intellisense#_types-of-completions
let s:ddc_config_json = s:ddc_config_json->join('')->json_decode()
let s:ddc_config_json['sourceParams'] = #{
			\	nvim-lsp: #{
			\		snippetEngine: denops#callback#register({
			\			body -> vsnip#anonymous(body)
			\		}),
			\	}
			\}
let s:ddc_config_json['filterParams'] = #{
			\	converter_dictionary: #{
			\		dicts: [g:github_dir . '/gunyarakun/kantan-ej-dictionary/kantan-ej-dictionary.json']
			\	}
			\}
call ddc#custom#patch_global(s:ddc_config_json)
call ddc#custom#patch_filetype('gina-commit', 'specialBufferCompletion', v:true)
call ddc#custom#patch_filetype('traqvim-message', {
			\ 'sources': ['stamp'],
			\ 'sourceOptions': {
			\   'stamp': {
			\     'mark': 'stamp',
			\     'matchers': ['matcher_fuzzy'],
			\	},
			\ },
			\ 'keywordPattern': '[a-zA-Z_:]\w*',
			\ 'specialBufferCompletion': v:true,
			\})
call ddc#enable()

" use pum.vim
autocmd CmdlineEnter * call ddc#enable_cmdline_completion()
'''

# 補完UI
[[plugins]]
repo = 'Shougo/ddc-ui-native'
on_source = 'ddc.vim'

# 独自ポップアップwindow
[[plugins]]
repo = 'Shougo/pum.vim'
hook_source = '''
inoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
inoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
cnoremap <expr> <Tab>
			\	pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
			\	ddc#map#manual_complete()
cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
cnoremap <expr> <C-n>
			\	pum#visible() ? '<Cmd>call pum#map#select_relative(+1)<CR>' :
			\	'<Down>'
cnoremap <expr> <C-p>
			\	pum#visible() ? '<Cmd>call pum#map#select_relative(-1)<CR>' :
			\	'<Up>'
cnoremap <expr> <CR>
			\	pum#visible() ? '<Cmd>call pum#map#confirm()<CR><CR>' :
			\	'<CR>'
cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
set cedit=<C-f>

let s:pum_config_json =<< trim MARK
{
	"max_height": 10,
	"max_width": 50,
	"padding": true
}
MARK
let s:pum_config_json = s:pum_config_json->join('')->json_decode()

call pum#set_option(s:pum_config_json)

" autocmd InsertEnter * inoremap <CR> <Cmd>call pum#map#confirm()<CR>
" leximaの影響を受けちゃうので、insertEnterでマッピングを上書きする
" ↓ここ他人のパンツなので、暇な時に直してみる
function s:MapPumVim() abort
	imap <expr> <CR> pum#visible() 
		\ ? pum#map#confirm()
		\ : lexima#expand('<LT>CR>', 'i')
	imap <expr> <C-n> pum#visible() 
		\ ? '<Cmd>call pum#map#select_relative(1)<CR>' 
		\ : '<Cmd>call ddc#map#manual_complete()<CR>'
	imap <expr> <C-p> pum#visible() 
		\ ? '<Cmd>call pum#map#select_relative(-1)<CR>' 
		\ : '<Cmd>call ddc#map#manual_complete()<CR>'
endfunction
autocmd InsertEnter * call <SID>MapPumVim()
'''

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
on_source = 'ddc.vim'

# 補完source
[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-nvim-lsp'
depends = ['denops.vim', 'ddc.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-dictionary'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-input'
on_source = 'ddc.vim'

# 補完filter
[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'atusy/ddc-filter-converter_dictionary'
on_source = 'ddc.vim'

# converter_dictionaryで使う辞書
[[plugins]]
repo = 'gunyarakun/kantan-ej-dictionary'

# スニペット
[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_source = 'ddc.vim'
hook_add = '''
" Jump forward or backward
imap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
smap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
imap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
smap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
'''

[[plugins]]
repo = 'uga-rosa/ddc-source-vsnip'
depends = ['vim-vsnip']
on_source = 'ddc.vim'

# SKK
[[plugins]]
repo = 'vim-skk/skkeleton'
on_map = { 'ic' = '<Plug>(skkeleton-toggle)'}
depends = ['ddc.vim']
lua_add = '''
vim.keymap.set('i', '<C-j>', '<Plug>(skkeleton-toggle)', { remap = true })
vim.keymap.set('c', '<C-j>', '<Plug>(skkeleton-toggle)', { remap = true })
'''
lua_source = '''
vim.fn["skkeleton#config"]({
	globalJisyo = vim.g.github_dir .. '/skk-dev/dict/SKK-JISYO.L',
	registerConvertResult = true,
})
vim.api.nvim_create_autocmd({ "User" }, {
	group = "MyAutoCmd",
	pattern = "skkeleton-enable-pre",
	callback = function()
		vim.b.prev_buffer_config = vim.fn["ddc#custom#get_buffer"]()
		vim.fn["ddc#custom#patch_buffer"]({
			ui = "native",
			sources = { "around", "skkeleton" },
			keywordPattern = "([ァ-ヮア-ン]|ー)+",
		})
	end
})
vim.api.nvim_create_autocmd({ "User" }, {
	group = "MyAutoCmd",
	pattern = "skkeleton-disable-pre",
	callback = function()
		vim.fn["ddc#custom#set_buffer"](vim.b.prev_buffer_config)
	end
})
vim.api.nvim_create_autocmd({ "InsertLeave" }, {
	group = "MyAutoCmd",
	pattern = "*",
	callback = function()
		vim.cmd("mode")
	end
})
'''

# skk の表示をリッチにするやつ
[[plugins]]
repo = 'delphinus/skkeleton_indicator.nvim'
on_source = 'skkeleton'
lua_source = '''
local skkeleton_indicator = require('skkeleton_indicator')
skkeleton_indicator.setup({
	alwaysShown = false,
	fadeOutMs = 0,
})
'''
