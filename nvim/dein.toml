# plugin manager
[[plugins]]
repo = 'Shougo/dein.vim'

# profile vim startup time
[[plugins]]
repo = 'dstein64/vim-startuptime'

# LSP
[[plugins]]
repo = 'neovim/nvim-lspconfig'
lua_add = '''
vim.keymap.set('n', '<space>e', vim.diagnostic.open_float)
vim.keymap.set('n', '[d', vim.diagnostic.goto_prev)
vim.keymap.set('n', ']d', vim.diagnostic.goto_next)
vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist)
-- Use LspAttach autocommand to only map the following keys
-- after the language server attaches to the current buffer
vim.api.nvim_create_autocmd('LspAttach', {
  group = vim.api.nvim_create_augroup('UserLspConfig', {}),
  callback = function(ev)
    -- Enable completion triggered by <c-x><c-o>
    -- vim.bo[ev.buf].omnifunc = 'v:lua.vim.lsp.omnifunc'

    -- Buffer local mappings.
    -- See `:help vim.lsp.*` for documentation on any of the below functions
    local opts = { buffer = ev.buf }
    vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, opts)
    vim.keymap.set('n', 'gd', vim.lsp.buf.definition, opts)
    vim.keymap.set('n', 'K', vim.lsp.buf.hover, opts)
    vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, opts)
    vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, opts)
    vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, opts)
    vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, opts)
    vim.keymap.set('n', '<space>wl', function()
      print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
    end, opts)
    vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, opts)
    vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, opts)
    vim.keymap.set('n', '<space>ca', vim.lsp.buf.code_action, opts)
    vim.keymap.set('n', 'gr', vim.lsp.buf.references, opts)
    vim.keymap.set('n', '<space>f', function()
      vim.lsp.buf.format { async = true }
    end, opts)
  end,
})
'''
lua_source = '''
vim.lsp.handlers["textDocument/hover"] = vim.lsp.with(
	vim.lsp.handlers.hover, {
	   -- Use a sharp border with `FloatBorder` highlights
		border = "single",
	   -- add the title in hover float window
		title = "hover"
	}
)
vim.lsp.handlers["textDocument/signatureHelp"] = vim.lsp.with(
	vim.lsp.handlers.signature_help, {
	-- Use a sharp border with `FloatBorder` highlights
	border = "single"
	}
)
local lspconfig = require'lspconfig'
-- Only define once
if not lspconfig.hdl_checker then
	require'lspconfig/configs'.hdl_checker = {
		default_config = {
			cmd = {"hdl_checker", "--lsp", };
			filetypes = {"vhdl", "verilog", "systemverilog"};
			root_dir = function(fname)
				-- will look for a parent directory with a .git directory. If none, just
				-- use the current directory
				return lspconfig.util.find_git_ancestor(fname) or lspconfig.util.path.dirname(fname)
				-- or (not both)
				-- Will look for the .hdl_checker.config file in a parent directory. If
				-- none, will use the current directory
				-- return lspconfig.util.root_pattern('.hdl_checker.config')(fname) or lspconfig.util.path.dirname(fname)
			end;
			settings = {};
		};
	}
end
'''

[[plugins]]
repo = 'williamboman/mason.nvim'
lua_source = '''
require('mason').setup()
'''

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
depends = ['nvim-lspconfig', 'mason.nvim']
lua_source = '''
local nvim_lsp = require("lspconfig")
local mason_lspconfig = require('mason-lspconfig')
local navic = require("nvim-navic")
local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities.textDocument.completion.completionItem.snippetSupport = true
local opts = {
	on_attach = function(client, bufnr)
		if client.server_capabilities.documentSymbolProvider then
			navic.attach(client, bufnr)
		end
	end,
	capabilities = capabilities
}
mason_lspconfig.setup_handlers({ function(server_name)
	local node_root_dir = nvim_lsp.util.root_pattern("package.json", "tsconfig.json");
	local is_node_repo = node_root_dir(vim.api.nvim_buf_get_name(0)) ~= nil
	if server_name == "tsserver" then
		if not is_node_repo then return end
		opts.root_dir = node_root_dir
	elseif server_name == "denols" then
		if is_node_repo then return end
		opts.root_dir = nvim_lsp.util.root_pattern("deps.ts", "deno.json")
	elseif server_name == "lua_ls" then
		opts.settings = {
			Lua = {
				diagnostics = { globals = { "vim" } },
			}
		}
	elseif server_name == "rust-analyzer" then
		opts.settings = {
			["rust-analyzer"] = {
				check = {
					command = "clippy"
				}
			}
		}
	end
	nvim_lsp[server_name].setup(opts)
end })
nvim_lsp["denols"].setup(opts)
'''

[[plugins]]
repo = 'SmiteshP/nvim-navic'

# Debugger
[[plugins]]
repo = 'mfussenegger/nvim-dap'
lua_add = '''
vim.keymap.set('n', '<F5>', function() require('dap').continue() end)
vim.keymap.set('n', '<F10>', function() require('dap').step_over() end)
vim.keymap.set('n', '<F11>', function() require('dap').step_into() end)
vim.keymap.set('n', '<F12>', function() require('dap').step_out() end)
vim.keymap.set('n', '<Leader>b', function() require('dap').toggle_breakpoint() end)
vim.keymap.set('n', '<Leader>B', function() require('dap').set_breakpoint() end)
vim.keymap.set('n', '<Leader>lp', function() require('dap').set_breakpoint(nil, nil, vim.fn.input('Log point message: ')) end)
vim.keymap.set('n', '<Leader>dr', function() require('dap').repl.open() end)
vim.keymap.set('n', '<Leader>dl', function() require('dap').run_last() end)
vim.keymap.set({'n', 'v'}, '<Leader>dh', function()
	require('dap.ui.widgets').hover()
end)
vim.keymap.set({'n', 'v'}, '<Leader>dp', function()
	require('dap.ui.widgets').preview()
end)
vim.keymap.set('n', '<Leader>df', function()
	local widgets = require('dap.ui.widgets')
	widgets.centered_float(widgets.frames)
end)
vim.keymap.set('n', '<Leader>ds', function()
	local widgets = require('dap.ui.widgets')
	widgets.centered_float(widgets.scopes)
end)
'''
lua_source = '''
local dap = require('dap')

dap.adapters = {
	codelldb = {
		type = 'server',
		port = "${port}",
		executable = {
			command = vim.fn.stdpath('data') .. '/mason/packages/codelldb/extension/adapter/codelldb',
			args = { "--port", "${port}" }
		}
	},
}

dap.configurations = {
	cpp = {
		{
			name = 'Launch file',
			type = 'codelldb',
			request = 'launch',
			program = function()
				return vim.fn.input('Path to executable: ', vim.fn.getcwd() .. '/a.out', 'file')
			end,
			cwd = '${workspaceFolder}',
			stopOnEntry = false,
		}
	}
}

'''

[[plugins]]
repo = 'rcarriga/nvim-dap-ui'
lua_source = '''
require('dapui').setup()
'''

# null-lsで使うらしい
[[plugins]]
repo = 'nvim-lua/plenary.nvim'

# インストールのUI
[[plugins]]
repo = 'j-hui/fidget.nvim'
lua_source = '''
require('fidget').setup({})
'''

# deno
[[plugins]]
repo = 'vim-denops/denops.vim'
on_event = 'CursorHold'
lua_add = '''
vim.g["denops#server#deno_args"] = { "-q", "--no-lock", "-A", "--unstable-kv" }
'''

[[plugins]]
repo = 'vim-denops/denops-startup-recorder.vim'
depends = 'denops.vim'

[[plugins]]
repo = 'voldikss/vim-floaterm'
lua_add = '''
vim.g.floaterm_width = 0.9
vim.g.floaterm_height = 0.9
vim.keymap.set('n', '<F8>', ':FloatermNew<CR>', { silent = true })
vim.keymap.set('n', '<F9>', ':FloatermToggle<CR>', { silent = true })
vim.keymap.set('t', '<F9>', '<C-\\><C-n>:FloatermToggle<CR>', { silent = true })
'''

# AI補完
[[plugins]]
repo = 'github/copilot.vim'
lua_add = '''
vim.keymap.set('i', '<C-l>', 'copilot#Accept("<CR>")', { silent = true, script = true, expr = true, replace_keycodes = false })
vim.g.copilot_no_tab_map = true
'''

# [[plugins]]
# repo = 'nvim-telescope/telescope.nvim'
# depends = ['plenary.nvim']
# merged = '0'
# lua_source = '''
# require('telescope').setup({})
# require('telescope').load_extension('noice')
# '''

# [[plugins]]
# repo = 'nvim-telescope/telescope-file-browser.nvim'
# depends = ['telescope.nvim']
# merged = '0'
# lua_source = '''
# require('telescope').load_extension('file_browser')
# '''

# help日本語
[[plugins]]
repo = 'vim-jp/vimdoc-ja'
lua_add = 'vim.opt.helplang = "ja,en"'

# 翻訳
[[plugins]]
repo = 'skanehira/denops-translate.vim'

# gccでコメントアウト
[[plugins]]
repo = 'numToStr/Comment.nvim'
lua_source = '''
require('Comment').setup()
'''

# 部分編集
[[plugins]]
repo = 'thinca/vim-partedit'

# font周りの設定(nerd fontとか)
[[plugins]]
repo = 'nvim-tree/nvim-web-devicons'

[[plugins]]
repo = 'utilyre/barbecue.nvim'
depends = [ 'SmiteshP/nvim-navic', 'nvim-tree/nvim-web-devicons' ]
lua_source = '''
require('barbecue').setup({
	separator = "  ",
	icons_enabled = true,
	icons = {
		default = "",
		symlink = "",
		git = "",
		folder = "",
		["folder-open"] = "",
	},
})
'''

[[plugins]]
repo = 'nvim-lualine/lualine.nvim'
lua_add = '''
vim.opt.laststatus = 3
'''
lua_source = '''
local navic = require("nvim-navic")
navic.setup({
	highlight = true,
	separator = "  ",
})

local lsp_names = function()
	local clients = {}
	for _, client in ipairs(vim.lsp.get_active_clients { bufnr = 0 }) do
			table.insert(clients, client.name)
	end
	local denops_status = vim.fn['denops#server#status']()
	if denops_status ~= '' then
		table.insert(clients, "D:" .. denops_status)
	end
	return ' ' .. table.concat(clients, ', ')
end

require('lualine').setup({
	options = {
		globalstatus = true,
		disabled_filetypes = {
			winbar = {
				"netrw",
			}
		}
	},
	tabline = {
		lualine_a = {
			{
				"tabs",
				mode = 2
			}
		},
		lualine_z = {
			{
				"windows"
			}
		},
	},
	sections = {
		lualine_c = {
			{
				"filename",
			}
		},
		lualine_x = {
			lsp_names
		},
		lualine_y = {
			'encoding',
			'fileformat',
			'filetype',
		},
		lualine_z = {
			{
				"progress",
			},
			{
				"location"
			}
		}
	},
})

-- filetypeがtraqvimの時にfilenameのpathを2(Absolute path)にする
vim.api.nvim_create_autocmd({ "WinEnter" }, {
	callback = function()
		if vim.bo.filetype == "traqvim" then
			require('lualine').setup({
				sections = {
					lualine_c = {
						{
							"filename",
							path = 2
						}
					}
				}
			})
		end
	end
})

vim.api.nvim_create_autocmd({ "WinLeave" }, {
	callback = function()
		if vim.bo.filetype == "traqvim" then
			require('lualine').setup({
				sections = {
					lualine_c = {
						{
							"filename",
							path = 0
						}
					}
				}
			})
		end
	end
})
'''

#  popup等の補助情報の表示
[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
depends = 'denops.vim'
lua_add = '''
vim.opt.completeopt:remove('preview')
'''
lua_source = '''
vim.fn['popup_preview#enable']()
'''

# lspで関数の引数を書いてる時に情報表示してくれるやつ
# これ入れてなくても、情報でるけど、忘れないように、ひとまず登録だけしとく
[[plugins]]
repo = 'matsui54/denops-signature_help'
depends = 'denops.vim'

# git branch
[[plugins]]
repo = 'itchyny/vim-gitbranch'

# カッコ補完
[[plugins]]
repo = 'cohama/lexima.vim'

# surround
[[plugins]]
repo = 'tpope/vim-surround'

# BadApple
[[plugins]]
repo = 'skanehira/badapple.vim'

# markdownのプレビュー
[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown', 'pandoc.markdown', 'rmd']
build = 'cd app && yarn install'

[[plugins]]
repo = 'kat0h/bufpreview.vim'
build = 'deno task prepare'

# colorのプレビュー
[[plugins]]
repo = 'gko/vim-coloresque'

# color scheme
[[plugins]]
repo = 'EdenEast/nightfox.nvim'

[[plugins]]
repo = 'sainnhe/edge'
lua_add = '''
if vim.fn.has('termguicolors') == 1 then
	vim.opt.termguicolors = true
end
vim.g.edge_style = 'aura'
vim.g.edge_better_performance = 1
'''

# UI
[[plugins]]
repo = 'folke/noice.nvim'
depends = ['nui.nvim']
lua_source = '''
-- settting for nocie.vim
require('noice').setup {
	cmdline = {
		enabled = true,
		view = "cmdline_popup",
		format = {
			cmdline = { icon = ">" },
			search_down = { icon = "🔍⌄" },
			search_up = { icon = "🔍⌃" },
			filter = { icon = "$" },
			lua = { icon = "☾" },
			help = { icon = "?" },
		},
	},
	popupmenu = {
		enabled = true,
		view = "pum",
	},
	lsp = {
		progress = {
			enabled = false
		}
	}
}
'''

# UI Component Library for Neovim
[[plugins]]
repo = 'MunifTanjim/nui.nvim'

# notification manager for Neovim
[[plugins]]
repo = 'rcarriga/nvim-notify'
lua_source = '''
require('notify').setup({
	render = "default",
	timeout = 1000,
	})
vim.notify = require('notify')
--vim.on_key(function(key)
--	require('notify')(key, 'info', {title = 'Key pressed'})
--end, 0)
'''

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'kamecha/traqVimPractice'
[plugins.ftplugin]
lua_traqvim = '''
vim.keymap.set('n', '<C-n>', '<Plug>(traqvim-next)', { remap = true, buffer = true, silent = true })
vim.keymap.set('n', '<C-p>', '<Plug>(traqvim-prev)', { remap = true, buffer = true, silent = true })
vim.keymap.set('n', 'r', ':TraqReload<CR>', { buffer = true, silent = true })
vim.keymap.set('n', 'o', ':TraqMessageOpen<CR>', { buffer = true, silent = true })
'''
lua_traqvim-message = '''
vim.keymap.set('n', '<LocalLeader>s', ':TraqMessageSend<CR>', { buffer = true, silent = true })
'''

# help
[[plugins]]
repo = 'LeafCage/vimhelpgenerator'

# git
[[plugins]]
repo = 'lambdalisue/gina.vim'
lua_add = '''
vim.keymap.set('n', '[Gina]', '<Nop>')
vim.keymap.set('n', '<space>g', '[Gina]', { remap = true })
vim.keymap.set('n', '[Gina]s', ':Gina status<CR>', { remap = true, silent = true })
vim.keymap.set('n', '[Gina]c', ':Gina commit<CR>', { remap = true, silent = true })
vim.keymap.set('n', '[Gina]l', ':Gina log --graph --all<CR>', { remap = true, silent = true })
vim.keymap.set('n', '[Gina]b', ':Gina branch --all<CR>', { remap = true, silent = true })
'''
[plugins.ftplugin]
gina-log = '''
setlocal cursorline
'''

[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
lua_source = '''
require('gitsigns').setup({
	on_attach = function(bufnr)
		local gs = package.loaded.gitsigns
		-- Navigation
		vim.keymap.set('n', ']c', function()
			if vim.wo.diff then return ']c' end
			vim.schedule(function() gs.next_hunk() end)
			return '<Ignore>'
		end, { buffer = bufnr, expr = true })
		vim.keymap.set('n', '[c', function()
			if vim.wo.diff then return '[c' end
			vim.schedule(function() gs.prev_hunk() end)
			return '<Ignore>'
		end, { buffer = bufnr, expr = true })
	end
})
'''

# GitHub
[[plugins]]
repo = 'skanehira/denops-gh.vim'
depends = 'denops.vim'

# QuickFixを一括置換
[[plugins]]
repo = 'thinca/vim-qfreplace'

# QuickFixを編集
[[plugins]]
repo = 'itchyny/vim-qfedit'

# skkの辞書
[[plugins]]
repo = 'skk-dev/dict'

# 日本語検索をローマ字で
[[plugins]]
repo = 'lambdalisue/kensaku.vim'
depends = 'denops.vim'
on_source = 'denops.vim'

[[plugins]]
repo = 'lambdalisue/mr.vim'

# <C-a> <C-x>を使い易くする
[[plugins]]
repo = 'monaqa/dial.nvim'
lua_add = '''
vim.keymap.set('n', '<C-a>', '<Plug>(dial-increment)')
vim.keymap.set('n', '<C-x>', '<Plug>(dial-decrement)')
vim.keymap.set('n', 'g<C-a>', 'g<Plug>(dial-increment)', { remap = true })
vim.keymap.set('n', 'g<C-x>', 'g<Plug>(dial-decrement)', { remap = true })
vim.keymap.set('v', '<C-a>', '<Plug>(dial-increment)')
vim.keymap.set('v', '<C-x>', '<Plug>(dial-decrement)')
vim.keymap.set('v', 'g<C-a>', 'g<Plug>(dial-increment)', { remap = true })
vim.keymap.set('v', 'g<C-x>', 'g<Plug>(dial-decrement)', { remap = true })
'''
lua_source = '''
local augend = require("dial.augend")
require("dial.config").augends:register_group {
	default = {
		augend.integer.alias.decimal,
		augend.integer.alias.hex,
		augend.constant.alias.bool,
		augend.constant.alias.ja_weekday,
		augend.constant.alias.ja_weekday_full,
		augend.case.new {
			types = { "camelCase", "snake_case", "kebab-case", "PascalCase", "SCREAMING_SNAKE_CASE" },
			cyclic = true,
		},
	}
}
'''

# 簡易実行
[[plugins]]
repo = 'thinca/vim-quickrun'

# ウィンドウの移動
[[plugins]]
repo = '4513ECHO/vim-snipewin'
lua_add = '''
vim.keymap.set('n', '<C-w>W', '<Plug>(snipewin)', { remap = true })
'''

[[plugins]]
repo = 'kamecha/denops-dbus_synctex'
depends = 'denops.vim'
on_ft = ['tex']
on_if = 'has("wsl")'
lua_post_source = '''
local syncTex = require("dbus_synctex")

vim.api.nvim_create_autocmd({ "FileType" }, {
	pattern = "tex",
	callback = function()
		vim.keymap.set("n", "<Leader>s", syncTex.syncViewCWD, { buffer = true })
	end
})

vim.api.nvim_create_autocmd({ "User" }, {
	pattern = "DenopsPluginPost:dbus_synctex",
	callback = function()
		syncTex.createSessionBus()
		syncTex.registerCallback(function(_, line, col, _)
			local colT = col < 0 and 1 or col
			require('notify')(
				'move (' .. vim.fn.line('.') .. ', ' .. vim.fn.col('.') .. ') -> (' .. line .. ', ' .. colT .. ')',
				'info',
				{ title = 'SyncSource' }
			)
			vim.fn.cursor({ line, colT })
		end)
		syncTex.registerSyncSource(syncTex.getPdfPathCWD())
	end
})
'''

[[plugins]]
repo = 'HakonHarnes/img-clip.nvim'

[[plugins]]
repo = 'kamecha/openVI-modoki'
depends = 'denops.vim'
lua_add = '''
vim.api.nvim_create_autocmd({ "User" }, {
	pattern = "DenopsPluginPost:openVI",
	command = "VISetup"
})
'''

# [[plugins]]
# repo = 'lervag/vimtex'
# lua_add = '''
# vim.g.vimtex_view_general_viewer = 'evince'
# '''

# [[plugins]]
# repo = 'madox2/vim-ai'

[[plugins]]
repo = 'Shougo/vinarise.vim'

[[plugins]]
repo = 'kshenoy/vim-signature'
