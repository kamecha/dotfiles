[[plugins]]
repo = 'Shougo/ddu.vim'
depends = ['denops.vim']
on_source = 'denops.vim'
hook_source = '''
let s:ddu_config_json =<< trim MARK
	{
		"ui": "ff",
		"uiOptions": {
			"filer": {
				"toggle": true
			}
		},
		"uiParams": {
			"ff": {
				"prompt": "> ",
				"filterSplitDirection": "floating",
				"split": "floating",
				"floatingBorder": "rounded",
				"floatingTitlePos": "center",
				"previewFloating":true,
				"previewFloatingBorder": "rounded",
				"previewFloatingTitle": [ ["Preview", "String"] ],
				"previewFloatingTitlePos": "center",
				"highlights": {
					"floatingCursorLine": "DduCursor",
					"preview": "DduPreview"
				},
				"previewWindowOptions": [ ["&signcolumn", "no"], ["&wrap", 0], ["&number", 0], ["&foldenable", 0] ]
			},
			"filer": {
				"split": "floating",
				"floatingBorder": "rounded",
				"previewFloating":true,
				"previewFloatingBorder": "rounded",
				"sortTreesFirst": true
			}
		},
		"filterParams": {
			"matcher_fzf": {
				"highlightMatched": "String"
			},
			"matcher_substring": {
				"highlightMatched": "String"
			},
			"matcher_kensaku": {
				"highlightMatched": "String"
			}
		},
		"kindOptions": {
			"action": {
				"defaultAction": "do",
				"quit": "true"
			},
			"file": {
				"defaultAction": "open"
			},
			"floaterm": {
				"defaultAction": "open"
			},
			"lsp": {
				"defaultAction": "open"
			},
			"ui_select": {
				"defaultAction": "select"
			},
			"command_history": {
				"defaultAction": "execute"
			},
			"help": {
				"defaultAction": "open"
			},
			"dein_update": {
				"defaultAction": "viewDiff"
			},
			"channel": {
				"defaultAction": "open"
			},
			"window": {
				"defaultAction": "open"
			},
			"tab": {
				"defaultAction": "open"
			}
		},
		"actionOptions": {
			"echo": {
				"quit": false
			},
			"echoDiff": {
				"quit": false
			}
		},
		"sourceOptions": {
			"rg": {
				"matchers": ["converter_display_word", "matcher_fzf"]
			},
			"file_rec": {
				"matchers": ["matcher_fzf"],
				"converters": ["converter_file_icon"]
			},
			"file_external": {
				"matchers": ["matcher_fzf"],
				"converters": ["converter_file_icon"]
			},
			"channel": {
				"columns": ["filename"]
			},
			"dummy": {
				"matchers": []
			},
			"dein_update": {
				"matchers": ["matcher_dein_update"]
			},
			"_": {
				"matchers": ["matcher_fzf"]
			}
		}
	}
MARK

let s:ddu_config_json = s:ddu_config_json->join('')->json_decode()

call ddu#custom#patch_global(s:ddu_config_json)

" jsonだと式が書けないので、レイアウト周りはここで設定する

let s:winCol = 1
let s:winWidth = &columns
let s:winRow = 1
let s:winHeight = &lines

function! s:set_size() abort
	" window自体は左上が始点となる
	let s:winCol = &columns / 8
	let s:winWidth = &columns - (&columns / 4)
	let s:winRow = &lines / 8
	let s:winHeight = &lines - (&lines / 4)
endfunction

function! s:set_ff_layout() abort
	" ┌────────────────────────────────┐
	" │                                │
	" │                                │
	" │        source                  │
	" │                                │
	" │                                │
	" │                                │
	" └────────────────────────────────┘
	call ddu#custom#patch_local('default', {
				\ 'uiParams': {
				\	'ff': {
				\		'winCol': s:winCol,
				\		'winRow': s:winRow,
				\		'winWidth': s:winWidth,
				\		'winHeight': s:winHeight,
				\	}
				\}
				\})

	" ┌────────────────┐┌────────────────┐
	" │                ││                │
	" │                ││                │
	" │                ││                │
	" │  source        ││                │
	" │                ││                │
	" │                ││   preview      │
	" │                ││                │
	" │                ││                │
	" │                ││                │
	" └────────────────┘│                │
	" ┌────────────────┐│                │
	" │   filter       ││                │
	" └────────────────┘└────────────────┘
	call ddu#custom#patch_local('ui_filter_preview_layout', {
				\ 'uiParams': {
				\	'ff': {
				\		'startFilter': v:true,
				\		'filterFloatingPosition': 'bottom',
				\		'autoAction': { 'name': 'preview' },
				\		'startAutoAction': v:true,
				\		'winCol': s:winCol,
				\		'winRow': s:winRow,
				\		'winWidth': s:winWidth / 2,
				\		'winHeight': s:winHeight,
				\		'previewCol': s:winCol + s:winWidth / 2 + 2,
				\		'previewRow': s:winRow + s:winHeight + 5,
				\		'previewWidth': s:winWidth / 2,
				\		'previewHeight': s:winHeight + 3,
				\	}
				\}
				\})

	" ┌────────────────┐
	" │                │
	" │   preview      │
	" │                │
	" └────────────────┘
	" ┌────────────────┐
	" │   source       │
	" │                │
	" └────────────────┘
	" ┌────────────────┐
	" │   filter       │
	" └────────────────┘
	call ddu#custom#patch_local('ui_filter_preview_horizontal_layout', {
				\ 'uiParams': {
				\	'ff': {
				\		'startFilter': v:true,
				\		'filterFloatingPosition': 'bottom',
				\		'autoAction': { 'name': 'preview' },
				\		'startAutoAction': v:true,
				\		'previewSplit': 'horizontal',
				\		'winCol': s:winCol,
				\		'winRow': &lines / 2,
				\		'winWidth': s:winWidth,
				\		'winHeight': s:winHeight / 2,
				\		'previewCol': s:winCol,
				\		'previewRow': 0,
				\		'previewWidth': s:winWidth,
				\		'previewHeight': s:winHeight / 2,
				\	}
				\}
				\})

	" ┌────────────────┐
	" │                │
	" │   source       │
	" │                │
	" └────────────────┘
	" ┌────────────────┐
	" │   filter       │
	" └────────────────┘
	call ddu#custom#patch_local('ui_filter_layout', {
				\ 'uiParams': {
				\	'ff': {
				\		'startFilter': v:true,
				\		'filterFloatingPosition': 'bottom',
				\		'winCol' : s:winCol,
				\		'winWidth' : s:winWidth,
				\		'winRow' : s:winRow,
				\		'winHeight' : s:winHeight,
				\	}
				\}
				\})

	" ┌────────────────┐┌────────────────┐
	" │                ││                │
	" │                ││                │
	" │                ││                │
	" │  source        ││   preview      │
	" │                ││                │
	" │                ││                │
	" │                ││                │
	" │                ││                │
	" └────────────────┘└────────────────┘
	call ddu#custom#patch_local('ui_preview_layout', {
				\ 'uiParams': {
				\	'ff': {
				\		'autoAction': { 'name': 'preview' },
				\		'startAutoAction': v:true,
				\		'previewSplit': 'vertical',
				\		'winCol' : s:winCol,
				\		'winWidth' : s:winWidth / 2,
				\		'winRow' : s:winRow,
				\		'winHeight' : s:winHeight,
				\		'previewCol' : s:winCol + s:winWidth / 2 + 2,
				\		'previewWidth' : s:winWidth / 2,
				\		'previewRow' : s:winRow,
				\		'previewHeight' : s:winHeight,
				\	}
				\}
				\})
endfunction

function! s:set_filer_layout() abort
	" ┌────────────────────────────────┐
	" │                                │
	" │                                │
	" │        source                  │
	" │                                │
	" │                                │
	" │                                │
	" └────────────────────────────────┘
	call ddu#custom#patch_local('default', {
				\ 'uiParams': {
				\	'filer': {
				\		'winCol': s:winCol,
				\		'winRow': s:winRow,
				\		'winWidth': s:winWidth,
				\		'winHeight': s:winHeight,
				\	}
				\}
				\})

	" ┌────────────────┐┌────────────────┐
	" │                ││                │
	" │                ││                │
	" │                ││                │
	" │  source        ││   preview      │
	" │                ││                │
	" │                ││                │
	" │                ││                │
	" │                ││                │
	" └────────────────┘└────────────────┘
	call ddu#custom#patch_local('ui_filer_preview_layout', {
				\ 'uiParams': {
				\	'filer': {
				\		'autoAction': { 'name': 'preview' },
				\		'startAutoAction': v:true,
				\		'previewSplit': 'vertical',
				\		'winCol' : s:winCol,
				\		'winWidth' : s:winWidth / 2,
				\		'winRow' : s:winRow,
				\		'winHeight' : s:winHeight,
				\		'previewCol' : s:winCol + s:winWidth / 2 + 2,
				\		'previewWidth' : s:winWidth / 2,
				\		'previewRow' : s:winRow,
				\		'previewHeight' : s:winHeight,
				\	}
				\}
				\})
endfunction
function! s:layout() abort
	call s:set_size()
	call s:set_ff_layout()
	call s:set_filer_layout()
endfunction

call s:layout()

autocmd VimResized * call s:layout()

function s:setqf(args)
	let items = a:args->get('items')
	let qflist = []
	for item in items
		let qf = {}
		let qf['text'] = item->get('word')
		let action = item->get('action')
		let qf['lnum'] = action->get('lineNr')
		let qf['bufnr'] = action->get('bufNr')
		let qflist = add(qflist, qf)
	endfor
	call setqflist(qflist, ' ')
	return 0
endfunction

call ddu#custom#action('kind', 'file', 'setqf', function('s:setqf'))

nnoremap [ddu] <Nop>
nmap <Space>u [ddu]

" telescopeのREADMEの順っぽく設定していく
" File
nmap <silent> [ddu]f <Cmd>call ddu#start({
			\ 'ui': 'ff',
			\ 'name': 'ui_filter_preview_layout',
			\ 'uiParams': {
			\		'ff': {
			\			'floatingTitle': [['Files', 'FloatBorder']],
			\		}
			\ },
			\ 'sources': [{'name': 'file_rec', 'params': {}}]
			\ })<CR>
nmap <silent> [ddu]g <Cmd>call ddu#start({
			\ 'ui': 'ff',
			\ 'name': 'ui_filter_preview_layout',
			\ 'uiParams': {
			\		'ff': {
			\			'floatingTitle': [['Files', 'FloatBorder'], ['Git', 'FloatBorder']],
			\		}
			\ },
			\ 'sources': [{
			\	'name': 'file_external',
			\	'params': { 'cmd': ['git', 'ls-files'] }
			\ }]
			\ })<CR>
" live grep
nmap <silent> [ddu]r <Cmd>call ddu#start({
			\ 'ui': 'ff',
			\ 'name': 'ui_filter_preview_layout',
			\ 'uiParams': {
			\		'ff': {
			\			'ignoreEmpty': v:false,
			\			'autoResize': v:false,
			\			'floatingTitle': [['Live Grep', 'String']],
			\		}
			\ },
			\ 'sources': [
			\	{
			\		'name': 'rg',
			\ 		'options': {'matchers': [], 'volatile': v:true},
			\	},
			\ ],
			\})<CR>

" Vim 関連
nmap <silent> [ddu]b <Cmd>call ddu#start({
			\ 'ui': 'ff',
			\ 'name': 'ui_filter_preview_layout',
			\ 'uiParams': {
			\		'ff': {
			\			'floatingTitle': [['Buffer', 'Blue']],
			\		}
			\ },
			\ 'sources': [{'name': 'buffer'}],
			\ 'sourceOptions': {
			\		'buffer': {
			\			'matchers': ['matcher_regex', 'matcher_fzf']
			\		}
			\ },
			\ 'filterParams': {
			\		'matcher_regex': {
			\			'regex': '^(?!.*\[No\s+Name\]$).*$'
			\		}
			\ }
			\ })<CR>
nmap <silent> [ddu]c <Cmd>call ddu#start({
			\ 'ui': 'ff',
			\ 'name': 'ui_filter_layout',
			\ 'uiParams': {
			\		'ff': {
			\			'floatingTitle': [['Command History', 'FloatBorder']],
			\			'autoAction': {},
			\		}
			\ },
			\ 'sources': [{'name': 'command_history'}],
			\ })<CR>
nmap <silent> [ddu]h <Cmd>call ddu#start({
			\ 'ui': 'ff',
			\ 'name': 'ui_filter_preview_layout',
			\ 'uiParams': {
			\		'ff': {
			\			'floatingTitle': [['Help', 'FloatBorder']],
			\		}
			\ },
			\ 'sources': [{'name': 'help', 'params': {}}],
			\ })<CR>
" QuickFix
nmap <silent> [ddu]q <Cmd>call ddu#start({
			\ 'ui': 'ff',
			\ 'name': 'ui_filter_preview_layout',
			\ 'uiParams': {
			\		'ff': {
			\			'prompt': 'qf',
			\			'floatingTitle': [['QuickFix', 'String']],
			\		}
			\ },
			\ 'sources': [
			\	{
			\		'name': 'qf',
			\		'params': {
			\			'isSubset': v:true,
			\			'format': '%p\|%t',
			\ 		}
			\	},
			\ ],
			\})<CR>
nmap <silent> [ddu]j <Cmd>call ddu#start({
			\ 'ui': 'ff',
			\ 'name': 'ui_filter_preview_horizontal_layout',
			\ 'uiParams': {
			\		'ff': {
			\			'floatingTitle': [['JumpList', 'String']],
			\		}
			\ },
			\ 'sources': [{'name': 'jumplist', 'params': {}}],
			\ })<CR>
nmap <silent> [ddu]t <Cmd>call ddu#start({
			\ 'ui': 'ff',
			\ 'name': 'ui_filter_preview_layout',
			\ 'uiParams': {
			\		'ff': {
			\			'floatingTitle': [['Tab', 'FloatBorder']],
			\			'autoAction': { 
			\				'name': 'preview',
			\				'params': { 'border': ['+', '-', '+', '\|'] }
			\			},
			\		}
			\ },
			\ 'sources': [{'name': 'tab', 'params': { 'format': 'tab\|%n:%T:%w' }}]
			\ })<CR>
nmap <silent> [ddu]w <Cmd>call ddu#start({
			\ 'ui': 'ff',
			\ 'name': 'ui_filter_preview_layout',
			\ 'uiParams': {
			\		'ff': {
			\			'floatingTitle': [['Window', 'FloatBorder']],
			\			'autoAction': { 
			\				'name': 'preview',
			\			},
			\		}
			\ },
			\ 'sources': [
			\		{
			\			'name': 'window',
			\			'options': { 'matchers': ['matcher_regex', 'matcher_fzf'] },
			\			'params': { 'format': 'tab:%tn:%T:%w:%wi' }
			\		}
			\ ],
			\ 'filterParams': {
			\		'matcher_regex': {
			\			'regex': '^(?!.*ddu-ff).*$'
			\		}
			\ }
			\ })<CR>
nmap <silent> [ddu]L <Cmd>call ddu#start({
			\ 'ui': 'ff',
			\ 'name': 'ui_filter_preview_horizontal_layout',
			\ 'uiParams': {
			\		'ff': {
			\			'floatingTitle': [['Line', 'String']],
			\			'previewWindowOptions': [ ['&signcolumn', 'no'], ['&wrap', 0], ['&number', 1], ['&relativenumber', 1] ]
			\		}
			\ },
			\ 'sources': [{'name': 'line', 'params': {}}],
			\ })<CR>

" Neovim LSP 関連
" lsp
nmap <silent> [ddu]lr <Cmd>call ddu#start({
			\ 'ui': 'ff',
			\ 'name': 'ui_filter_preview_layout',
			\ 'uiParams': {
			\	'ff': {
			\		'floatingTitle': [['Lsp References', 'FloatBorder']],
			\	}
			\ },
			\ 'sources': [
			\	{'name': 'lsp_references'}
			\ ],
			\ })<CR>
nmap <silent> [ddu]ld <Cmd>call ddu#start({
			\ 'ui': 'ff',
			\ 'name': 'ui_filter_preview_layout',
			\ 'uiParams': {
			\	'ff': {
			\		'floatingTitle': [['Lsp Definition', 'FloatBorder']],
			\	}
			\ },
			\ 'sources': [
			\	{
			\		'name': 'dummy',
			\		'options': { 
			\			'converters': [
			\				{ 
			\					'name': 'converter_highlight', 'params': { 'hl_group': 'Red' }
			\				}
			\			] 
			\		},
			\		'params': { 'display': '>>Definition<<' }
			\	},
			\	{'name': 'lsp_definition', 'params': { 'method': 'textDocument/definition' }},
			\	{
			\		'name': 'dummy',
			\		'options': {
			\			'converters': [
			\				{ 'name': 'converter_highlight', 'params': { 'hl_group': 'Blue' }}
			\			] 
			\		},
			\		'params': { 'display': '>>typeDefinition<<' }
			\	},
			\	{'name': 'lsp_definition', 'params': { 'method': 'textDocument/typeDefinition' }},
			\	{
			\		'name': 'dummy',
			\		'options': {
			\			'converters': [
			\				{ 'name': 'converter_highlight', 'params': { 'hl_group': 'Yellow' }}
			\			] 
			\		},
			\		'params': { 'display': '>>declaration<<' }
			\	},
			\	{'name': 'lsp_definition', 'params': { 'method': 'textDocument/declaration' }},
			\	{
			\		'name': 'dummy',
			\		'options': {
			\			'converters': [
			\				{ 'name': 'converter_highlight', 'params': { 'hl_group': 'Green' }}
			\			] 
			\		},
			\		'params': { 'display': '>>Implementation<<' }
			\	},
			\	{'name': 'lsp_definition', 'params': { 'method': 'textDocument/implementation' }},
			\ ],
			\ })<CR>
nmap <silent> [ddu]ls <Cmd>call ddu#start({
			\ 'ui': 'ff',
			\ 'name': 'ui_filter_preview_layout',
			\ 'uiParams': {
			\	'ff': {
			\		'floatingTitle': [['Lsp Symbol', 'FloatBorder']],
			\	}
			\ },
			\ 'sources': [
			\	{'name': 'dummy', 'params': { 'display': 'documentSymbol' }},
			\	{'name': 'lsp_documentSymbol'},
			\	{'name': 'dummy', 'params': { 'display': 'workspaceSymbol' }},
			\	{'name': 'lsp_workspaceSymbol'}
			\ ],
			\ })<CR>
nmap <silent> [ddu]lh <Cmd>call ddu#start({
			\ 'ui': 'filer',
			\ 'name': 'ui_filer_preview_layout',
			\ 'uiParams': {
			\	'ff': {
			\		'floatingTitle': [['Lsp Hierarchy', 'FloatBorder']],
			\		'displayTree': v:true,
			\		'startFilter': v:false,
			\		'previewSplit': 'vertical',
			\	}
			\ },
			\ 'sources': [
			\	{'name': 'dummy', 'params': { 'display': 'incomingCalls' }},
			\	{'name': 'lsp_callHierarchy', 'params': { 'method': 'callHierarchy/incomingCalls' }},
			\	{'name': 'dummy', 'params': { 'display': 'outgoingCalls' }},
			\	{'name': 'lsp_callHierarchy', 'params': { 'method': 'callHierarchy/outgoingCalls' }}
			\ ],
			\ })<CR>

" 他のプラグインとの連携
nmap <silent> [ddu]T <Cmd>call ddu#start({
			\ 'ui': 'ff',
			\ 'name': 'ui_filter_preview_horizontal_layout',
			\ 'uiParams': {
			\		'ff': {
			\			'floatingTitle': [['Floaterm', 'FloatBorder']],
			\		}
			\ },
			\ 'sources': [{'name': 'floaterm'}]
			\ })<CR>
nmap <silent> [ddu]d <Cmd>call ddu#start({
			\ 'ui': 'ff',
			\ 'name': 'ui_filter_layout',
			\ 'uiParams': {
			\		'ff': {
			\			'floatingTitle': [['Dein', 'Black']],
			\			'autoAction': {},
			\		}
			\ },
			\ 'sources': [{'name': 'dein'}],
			\ })<CR>
" VtraQ
nmap <silent> [ddu]v<CR> <Cmd>call ddu#start({
			\ 'ui': 'ff',
			\ 'name': 'ui_filter_preview_layout',
			\ 'sources': [{'name': 'channel_rec', 'params': {}}],
			\})<CR>
nmap <silent> [ddu]ve<CR> <Cmd>call ddu#start({
			\ 'ui': 'filer',
			\ 'sources': [
			\	{'name': 'channel_rec', 'params': {'type': 'unread'}},
			\	{'name': 'channel'}
			\ ],
			\ 'sourceOptions': {'channel': { 'path': 'VtraQ' }, 'channel_rec': {'path': 'unread'}},
			\})<CR>
nmap <silent> [ddu]vu<CR> <Cmd>call ddu#start({
			\ 'ui': 'ff',
			\ 'name': 'ui_filter_preview_layout',
			\ 'sources': [{'name': 'channel_rec', 'params': {'type': 'unread'}}],
			\})<CR>
nmap <silent> [ddu]vs<CR> <Cmd>call ddu#start({
			\ 'ui': 'ff',
			\ 'name': 'ui_filter_preview_layout',
			\ 'sources': [{'name': 'channel_rec', 'params': {'type': 'subscribed'}}],
			\})<CR>


" filer 表示
nmap <silent> [ddu]e <Cmd>call ddu#start({
			\ 'ui': 'filer',
			\ 'name': 'ui_filer_preview_layout',
			\ 'resume': v:true,
			\ 'sources': [{'name': 'file'}],
			\ 'sourceOptions': {'_': {'columns': ['icon_filename']}},
			\ 'uiParams': {
			\	'filer': {
			\		'split': 'floating',
			\		'splitDirectoin': 'topleft',
			\		'previewFloating': v:true,
			\	}
			\ },
			\ })<CR>
nmap <silent> [ddu]E <Cmd>call ddu#start({
			\ 'uiParams': { 
			\	'ff': { 
			\		'startFilter': v:true ,
			\		'floatingTitle': [['File', 'Normal'], ['Browser', 'Directory']],
			\	} 
			\ },
			\ 'sources': [
			\	{
			\		'name': 'file',
			\		'options': {
			\			'columns': ['icon_filename'],
			\			'converters': ['converter_file_info'],
			\		}
			\	}
			\ ],
			\ })<CR>
'''

[[plugins]]
repo = 'Shougo/ddu-ui-ff'
on_source = 'ddu.vim'
[plugins.ftplugin]
ddu-ff = '''
setlocal cursorline
setlocal signcolumn=yes
nnoremap <buffer><silent> <CR>
			\ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
nnoremap <buffer><silent> t
			\ <Cmd>call ddu#ui#ff#do_action('itemAction', {'params': {'command': 'tabnew'}})<CR>
nnoremap <buffer><silent> o
			\ <Cmd>call ddu#ui#ff#do_action('itemAction', {'params': {'command': 'split'}})<CR>
nnoremap <buffer><silent> v
			\ <Cmd>call ddu#ui#ff#do_action('itemAction', {'params': {'command': 'vsplit'}})<CR>
nnoremap <buffer><silent> a
			\ <Cmd>call ddu#ui#ff#do_action('chooseAction')<CR>
nnoremap <buffer><silent> s
			\ <Cmd>call ddu#ui#ff#do_action('toggleSelectItem')<CR>
nnoremap <buffer><silent> i
			\ <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>
nnoremap <buffer><silent> c
			\ <Cmd>call ddu#ui#ff#do_action('closeFilterWindow')<CR>
nnoremap <buffer><silent> p
			\ <Cmd>call ddu#ui#ff#do_action('preview')<CR>
nnoremap <buffer><silent> e
			\ <Cmd>call ddu#ui#ff#do_action('expandItem', {'mode': 'toggle'})<CR>
nnoremap <buffer><expr> -
			\ ddu#ui#get_item()->get('__sourceName') == 'file' ?
			\	"<ESC><Cmd>call ddu#ui#do_action('itemAction', { 'name': 'narrow' , 'params': { 'path': '..' }})<CR>" :
			\	""
nnoremap <buffer><silent> q
			\ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
autocmd CursorMoved <buffer> call s:update_cursor()
function! s:update_cursor()
	sign unplace 100
	sign define cursor text=>> texthl=Constant
	execute printf('sign place 100 line=%d name=cursor buffer=%s',
		\ '.'->line(), '%'->bufnr())
endfunction
'''
ddu-ff-filter = '''
nnoremap <buffer> <CR>
			\ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
nnoremap <buffer><silent> q
			\ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
inoremap <buffer> <C-p>
			\ <Cmd>call ddu#ui#ff#do_action('preview')<CR>
inoremap <buffer><expr> <CR>
			\ ddu#ui#get_item()->get('__sourceName') == 'file' ?
			\	ddu#ui#get_item()->get('action')->get('isDirectory') ?
			\		"<ESC><Cmd>call ddu#ui#do_action('itemAction', { 'name': 'narrow' })<CR>" :
			\		"<ESC><Cmd>call ddu#ui#do_action('itemAction')<CR>" :
			\	"<ESC><Cmd>call ddu#ui#do_action('itemAction')<CR>"
inoremap <buffer> <C-t>
			\ <ESC><Cmd>call ddu#ui#ff#do_action('itemAction', {'params': {'command': 'tabnew'}})<CR>
inoremap <buffer> <C-o>
			\ <ESC><Cmd>call ddu#ui#ff#do_action('itemAction', {'params': {'command': 'split'}})<CR>
inoremap <buffer> <C-v>
			\ <ESC><Cmd>call ddu#ui#ff#do_action('itemAction', {'params': {'command': 'vsplit'}})<CR>
inoremap <buffer> <C-n>
			\ <Cmd>call ddu#ui#ff#execute("call cursor(line('.')+1,0)<Bar>redraw")<CR>
inoremap <buffer> <C-p>
			\ <Cmd>call ddu#ui#ff#execute("call cursor(line('.')-1,0)<Bar>redraw")<CR>
inoremap <buffer> <C-s>
			\ <Cmd>call ddu#ui#ff#do_action('toggleSelectItem')<CR>
inoremap <buffer> <C-a>
			\ <Cmd>call ddu#ui#ff#do_action('toggleAllItems')<CR>
inoremap <buffer> <C-l>
			\ <ESC><Cmd>call ddu#ui#ff#do_action('leaveFilterWindow')<CR>
inoremap <buffer> <C-j>
			\ <ESC><Cmd>call ddu#ui#ff#do_action('updateOptions', #{
			\	uiParams: #{
			\		ff: #{
			\			filterFloatingTitle: [['日本語検索', 'LightBlue']],
			\			filterFloatingTitlePos: 'center',
			\		}
			\	},
			\	sourceOptions: #{
			\		line: #{
			\			matchers: ['matcher_kensaku']
			\		}
			\	},
			\	})<CR>i
inoremap <buffer> <C-q>
			\ <ESC><Cmd>call ddu#ui#ff#do_action('quit')<CR>
'''

[[plugins]]
repo = 'Shougo/ddu-ui-filer'
on_source = 'ddu.vim'
[plugins.ftplugin]
ddu-filer = '''
nnoremap <buffer><expr> <CR>
			\ ddu#ui#get_item()->get('isTree', v:false) ?
			\ "<Cmd>call ddu#ui#do_action('expandItem', {'mode': 'toggle'})<CR>" :
			\ "<Cmd>call ddu#ui#do_action('itemAction')<CR>"
nnoremap <buffer><silent> e
			\ <Cmd>call ddu#ui#do_action('expandItem', {'mode': 'toggle'})<CR>
nnoremap <buffer><silent> p
			\ <Cmd>call ddu#ui#do_action('togglePreview')<CR>
nnoremap <buffer><silent> s
			\ <Cmd>call ddu#ui#do_action('toggleSelectItem')<CR>
nnoremap <buffer><silent> o
			\ <Cmd>call ddu#ui#do_action('itemAction', {'name': 'open', 'params': {'command': 'split'}})<CR>
nnoremap <buffer><silent> v
			\ <Cmd>call ddu#ui#do_action('itemAction', {'name': 'open', 'params': {'command': 'vsplit'}})<CR>
nnoremap <buffer><silent> t
			\ <Cmd>call ddu#ui#do_action('itemAction', {'name': 'open', 'params': {'command': 'tabnew'}})<CR>
nnoremap <buffer><silent> a
			\ <Cmd>call ddu#ui#do_action('chooseAction')<CR>
nnoremap <buffer><silent> %
			\ <Cmd>call ddu#ui#do_action('itemAction', {'name': 'newFile'})<CR>
nnoremap <buffer><silent> d
			\ <Cmd>call ddu#ui#do_action('itemAction', {'name': 'newDirectory'})<CR>
nnoremap <buffer><silent> R
			\ <Cmd>call ddu#ui#do_action('itemAction', {'name': 'rename'})<CR>
nnoremap <buffer><silent> q
			\ <Cmd>call ddu#ui#do_action('quit')<CR>
'''

# 補完Source

[[plugins]]
repo = 'Shougo/ddu-source-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
on_source = 'ddu.vim'

[[plugins]]
repo = 'flow6852/ddu-source-qf'
on_source = 'ddu.vim'

[[plugins]]
repo = 'shun/ddu-source-rg'
on_source = 'ddu.vim'

[[plugins]]
repo = 'shun/ddu-source-buffer'
on_source = 'ddu.vim'

[[plugins]]
repo = 'matsui54/ddu-vim-ui-select'
on_source = 'ddu.vim'

[[plugins]]
repo = 'matsui54/ddu-source-command_history'
on_source = 'ddu.vim'

[[plugins]]
repo = 'uga-rosa/ddu-source-lsp'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-line'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kamecha/ddu-source-jumplist'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kamecha/ddu-source-tab'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kamecha/ddu-source-floaterm'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kamecha/ddu-source-window'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kamecha/ddu-source-treesitter'
on_source = 'ddu.vim'

[[plugins]]
repo = 'matsui54/ddu-source-dein_update'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-dummy'
on_source = 'ddu.vim'

[[plugins]]
repo = 'matsui54/ddu-source-help'
on_source = 'ddu.vim'

[[plugins]]
repo = 'matsui54/ddu-source-file_external'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-action'
on_source = 'ddu.vim'

# 補完Filter
[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kamecha/ddu-filter-matcher_regex'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kamecha/ddu-filter-converter_highlight'
on_source = 'ddu.vim'

[[plugins]]
repo = 'yuki-yano/ddu-filter-fzf'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Milly/ddu-filter-kensaku'
depends = ['kensaku.vim']
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-filter-converter_display_word'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kamecha/ddu-filter-converter_file_icon'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kamecha/ddu-filter-converter_file_info'
on_source = 'ddu.vim'

# 補完Kind
[[plugins]]
repo = 'Shougo/ddu-kind-file'
on_source = 'ddu.vim'

# カラム
[[plugins]]
repo = 'Shougo/ddu-column-filename'
on_source = 'ddu.vim'

# icon
[[plugins]]
repo = 'ryota2357/ddu-column-icon_filename'
on_source = 'ddu.vim'

# command
[[plugins]]
repo = 'Shougo/ddu-commands.vim'
on_source = 'ddu.vim'
