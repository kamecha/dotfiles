[[plugins]]
repo = 'Shougo/ddu.vim'
depends = ['denops.vim']
on_source = 'denops.vim'
lua_source = '''
vim.fn["ddu#custom#alias"]('column', 'tab_column', 'custom')

vim.fn["ddu#custom#patch_global"]({
	ui = "ff",
	uiOptions = {
		filer = {
			toggle = true
		}
	},
	uiParams = {
		ff = {
			prompt = "> ",
			filterSplitDirection = "floating",
			split = "floating",
			floatingBorder = "rounded",
			floatingTitlePos = "center",
			previewFloating = true,
			previewFloatingBorder = "rounded",
			previewFloatingTitle = { { "Preview", "String" } },
			previewFloatingTitlePos = "center",
			highlights = {
				floatingCursorLine = "DduCursor",
				preview = "DduPreview"
			},
			previewWindowOptions = {
				{ "&signcolumn", "no" },
				{ "&wrap",       0 },
				{ "&number",     0 },
				{ "&foldenable", 0 }
			}
		},
		filer = {
			split = "floating",
			floatingBorder = "rounded",
			previewFloating = true,
			previewFloatingBorder = "rounded",
			sortTreesFirst = true
		}
	},
	sourceOptions = {
		rg = {
			matchers = { "converter_display_word", "matcher_fzf" }
		},
		file_rec = {
			matchers = { "matcher_fzf" },
			converters = { "converter_file_icon" }
		},
		file_external = {
			matchers = { "matcher_fzf" },
			converters = { "converter_file_icon" }
		},
		dummy = {
			matchers = {}
		},
		dein_update = {
			matchers = { "matcher_dein_update" }
		},
		_ = {
			matchers = { "matcher_fzf" },
			sorters = { "sorter_fzf" }
		}
	},
	sourceParams = {
		anyjump_definition = {
			highlights = {
				path = "Normal",
				lineNr = "Normal",
			}
		},
		anyjump_reference = {
			highlights = {
				path = "Normal",
				lineNr = "Normal",
			}
		},
	},
	filterParams = {
		matcher_fzf = {
			highlightMatched = "Blue"
		},
		matcher_substring = {
			highlightMatched = "Blue"
		},
		matcher_kensaku = {
			highlightMatched = "Blue"
		},
		converter_file_icon = {
			source = "nvim-web-devicons"
		},
	},
	columnParams = {
		tab_column = {
			getLengthCallbackId = vim.fn["denops#callback#register"](function(args)
				local length = 0
				for _, item in ipairs(args.items) do
					local display = item["word"]
					if item["display"] ~= nil and item["display"] ~= "" then
						display = item["display"]
					end
					display = " " .. "+" .. display
					length = math.max(length, #display)
				end
				return length
			end),
			getTextCallbackId = vim.fn["denops#callback#register"](function(args)
				local display = args.item["word"]
				if args.item["display"] ~= nil and args.item["display"] ~= "" then
					display = args.item["display"]
				end
				local text = ""
				if args.item["__level"] == 0 then
					if args.item["__expanded"] then
						text = "-" .. display
					else
						text = "+" .. display
					end
				else
					text = " " .. "|" .. display
				end
				return { text = text }
			end),
		}
	},
	kindOptions = {
		action = {
			defaultAction = "do"
		},
		file = {
			defaultAction = "open"
		},
		floaterm = {
			defaultAction = "open"
		},
		lsp = {
			defaultAction = "open"
		},
		ui_select = {
			defaultAction = "select"
		},
		command_history = {
			defaultAction = "execute"
		},
		help = {
			defaultAction = "open"
		},
		dein_update = {
			defaultAction = "viewDiff"
		},
		channel = {
			defaultAction = "open"
		},
		["ai-review-request"] = {
			defaultAction = "open"
		},
		["ai-review-log"] = {
			defaultAction = "resume"
		},
		window = {
			defaultAction = "open"
		},
		tab = {
			defaultAction = "open"
		}
	},
	actionOptions = {
		echo = {
			quit = false
		},
		echoDiff = {
			quit = false
		}
	},
})

-- layout

local function set_ff_layout()
	local dduCol = "( &columns / 8 )"
	local dduRow = "( &lines / 8 )"
	local dduWidth = "( &columns - (&columns / 4) )"
	local dduHeight = "( &lines - (&lines / 4) )"
	-- ┌────────────────────────────────┐
	-- │                ┌─────────────┐ │
	-- │                │             │ │
	-- │        source  │  preview    │ │
	-- │                │             │ │
	-- │                │             │ │
	-- │                └─────────────┘ │
	-- └────────────────────────────────┘
	vim.fn["ddu#custom#patch_local"]('default', {
		uiParams = {
			ff = {
				winCol = dduCol,
				winRow = dduRow,
				winWidth = dduWidth,
				winHeight = dduHeight,
				previewCol = dduCol .. "+" .. dduWidth .. "/ 2",
				previewRow = dduRow .. "+" .. dduHeight .. "+ 1",
				previewWidth = "(" .. dduWidth .. "- 1)" .. "/ 2",
				previewHeight = dduHeight .. "- 2",
			}
		}
	})

	-- ┌────────────────┐┌────────────────┐
	-- │                ││                │
	-- │                ││                │
	-- │                ││                │
	-- │  source        ││                │
	-- │                ││                │
	-- │                ││   preview      │
	-- │                ││                │
	-- │                ││                │
	-- │                ││                │
	-- └────────────────┘│                │
	-- ┌────────────────┐│                │
	-- │   filter       ││                │
	-- └────────────────┘└────────────────┘
	vim.fn["ddu#custom#patch_local"]('ui_filter_preview_layout', {
		uiParams = {
			ff = {
				startFilter = true,
				filterFloatingPosition = 'bottom',
				autoAction = { name = 'preview' },
				startAutoAction = true,
				winCol = dduCol,
				winRow = dduRow,
				winWidth = dduWidth .. "/ 2",
				winHeight = dduHeight,
				previewCol = dduCol .. " + " .. dduWidth .. "/ 2" .. " + 2",
				previewRow = dduRow .. " + " .. dduHeight .. " + 5",
				previewWidth = dduWidth .. "/ 2",
				previewHeight = dduHeight .. " + 3",
			}
		}
	})

	-- ┌────────────────┐
	-- │                │
	-- │   preview      │
	-- │                │
	-- └────────────────┘
	-- ┌────────────────┐
	-- │   source       │
	-- │                │
	-- └────────────────┘
	-- ┌────────────────┐
	-- │   filter       │
	-- └────────────────┘
	vim.fn["ddu#custom#patch_local"]('ui_filter_preview_horizontal_layout', {
		uiParams = {
			ff = {
				startFilter = true,
				filterFloatingPosition = 'bottom',
				autoAction = { name = 'preview' },
				startAutoAction = true,
				previewSplit = 'horizontal',
				winCol = dduCol,
				winRow = "&lines / 2",
				winWidth = dduWidth,
				winHeight = dduHeight .. " / 2",
				previewCol = dduCol,
				previewRow = 0,
				previewWidth = dduWidth,
				previewHeight = dduHeight .. " / 2",
			}
		}
	})

	-- ┌────────────────┐
	-- │                │
	-- │   preview      │
	-- │                │
	-- └────────────────┘
	-- ┌────────────────┐
	-- │   filter       │
	-- └────────────────┘
	-- ┌────────────────┐
	-- │   source       │
	-- │                │
	-- └────────────────┘
	vim.fn["ddu#custom#patch_local"]('ui_filter_preview_horizontal_top_layout', {
		uiParams = {
			ff = {
				startFilter = true,
				filterFloatingPosition = 'top',
				autoAction = { name = 'preview' },
				startAutoAction = true,
				previewSplit = 'horizontal',
				winCol = dduCol,
				winRow = "&lines / 2 + 1",
				winWidth = dduWidth,
				winHeight = dduHeight .. " / 2",
				-- previewCol = WinCol,
				previewRow = "&lines / 2 + 1 - 3",
				previewWidth = dduWidth,
				previewHeight = dduHeight .. " / 2",
			}
		}
	})

	-- ┌────────────────┐
	-- │                │
	-- │   source       │
	-- │                │
	-- └────────────────┘
	-- ┌────────────────┐
	-- │   filter       │
	-- └────────────────┘
	vim.fn["ddu#custom#patch_local"]('ui_filter_layout', {
		uiParams = {
			ff = {
				startFilter = true,
				filterFloatingPosition = 'bottom',
				winCol = dduCol,
				winWidth = dduWidth,
				winRow = dduRow,
				winHeight = dduHeight,
			}
		}
	})

	-- ┌────────────────┐┌────────────────┐
	-- │                ││                │
	-- │                ││                │
	-- │                ││                │
	-- │  source        ││   preview      │
	-- │                ││                │
	-- │                ││                │
	-- │                ││                │
	-- │                ││                │
	-- └────────────────┘└────────────────┘
	vim.fn["ddu#custom#patch_local"]('ui_preview_layout', {
		uiParams = {
			ff = {
				autoAction = { name = 'preview' },
				startAutoAction = true,
				previewSplit = 'vertical',
				winCol = dduCol,
				winWidth = dduWidth .. "/ 2",
				winRow = dduRow,
				winHeight = dduHeight,
				previewCol = dduCol .. " + " .. dduWidth .. "/ 2" .. " + 2",
				previewWidth = dduWidth .. "/ 2",
				previewRow = dduRow,
				previewHeight = dduHeight,
			}
		}
	})
end

local function set_filer_layout()
	local dduCol = "( &columns / 8 )"
	local dduRow = "( &lines / 8 )"
	local dduWidth = "( &columns - (&columns / 4) )"
	local dduHeight = "( &lines - (&lines / 4) )"
	-- ┌────────────────────────────────┐
	-- │                ┌─────────────┐ │
	-- │                │             │ │
	-- │        source  │  preview    │ │
	-- │                │             │ │
	-- │                │             │ │
	-- │                └─────────────┘ │
	-- └────────────────────────────────┘
	vim.fn["ddu#custom#patch_local"]('default', {
		uiParams = {
			filer = {
				winCol = dduCol,
				winRow = dduRow,
				winWidth = dduWidth,
				winHeight = dduHeight,
				previewCol = dduCol .. "+" .. dduWidth .. "/ 2",
				previewRow = dduRow .. "+" .. dduHeight .. "+ 1",
				previewWidth = "(" .. dduWidth .. "- 1)" .. "/ 2",
				previewHeight = dduHeight .. "- 2",
			}
		}
	})

	-- ┌────────────────┐┌────────────────┐
	-- │                ││                │
	-- │                ││                │
	-- │                ││                │
	-- │  source        ││   preview      │
	-- │                ││                │
	-- │                ││                │
	-- │                ││                │
	-- │                ││                │
	-- └────────────────┘└────────────────┘
	vim.fn["ddu#custom#patch_local"]('ui_filer_preview_layout', {
		uiParams = {
			filer = {
				autoAction = { name = 'preview' },
				startAutoAction = true,
				previewSplit = 'vertical',
				winCol = dduCol,
				winWidth = dduWidth .. "/ 2",
				winRow = dduRow,
				winHeight = dduHeight,
				previewCol = dduCol .. " + " .. dduWidth .. "/ 2" .. " + 2",
				previewWidth = dduWidth .. "/ 2",
				previewRow = dduRow,
				previewHeight = dduHeight,
			}
		}
	})

	-- ┌────────────────┐
	-- │                │
	-- │   preview      │
	-- │                │
	-- └────────────────┘
	-- ┌────────────────┐
	-- │                │
	-- │   source       │
	-- │                │
	-- └────────────────┘
	vim.fn["ddu#custom#patch_local"]('ui_filer_preview_horizontal_layout', {
		uiParams = {
			filer = {
				autoAction = { name = 'preview' },
				startAutoAction = true,
				previewSplit = 'horizontal',
				winCol = dduCol,
				winWidth = dduWidth,
				winRow = dduRow .. "+" .. dduHeight .. "/ 2",
				winHeight = dduHeight .. "/ 2",
				-- previewCol = WinCol,
				previewWidth = dduWidth,
				-- previewRow = WinRow + math.floor(WinHeight / 2),
				previewHeight = dduHeight .. "/ 2",
			}
		}
	})
end

local function update_ui_layout()
	local currentOptions = vim.fn["ddu#custom#get_current"]()
	if vim.tbl_isempty(currentOptions) then
		return
	end
	local updatedLocalOptions = vim.fn["ddu#custom#get_local"]()
	vim.fn["ddu#ui#do_action"]('updateOptions', updatedLocalOptions[currentOptions["name"]])
	vim.fn["ddu#ui#do_action"]('closePreviewWindow')
	vim.fn["ddu#ui#do_action"]('redraw', { method = "uiRedraw" })
	vim.fn["ddu#ui#do_action"]('preview')
	if currentOptions["ui"] == "ff" then
		vim.fn["ddu#ui#do_action"]('closeFilterWindow')
		vim.fn["ddu#ui#do_action"]('openFilterWindow')
	end
end

local function layout()
	set_ff_layout()
	set_filer_layout()
end

layout()

vim.api.nvim_create_autocmd("VimResized", {
	pattern = "*",
	callback = function()
		layout()
		update_ui_layout()
	end
})

-- custom action

vim.fn["ddu#custom#action"]('kind', 'file', 'setcdo', function(args)
	local qflist = {}
	for _, item in ipairs(args["items"]) do
		local qf = {}
		qf["text"] = item["word"]
		local action = item["action"]
		qf["lnum"] = action["lineNr"]
		qf["bufnr"] = action["bufNr"]
		qf["filename"] = action["path"]
		table.insert(qflist, qf)
	end
	-- lnumを降順にソート
	table.sort(qflist, function(a, b)
		return a["lnum"] > b["lnum"]
	end)
	vim.fn.setqflist(qflist, ' ')
	local cmd = vim.fn.input(":cdo ", "normal ")
	-- :cdoが実行されてる間のウィンドウ
	-- なんでか知らんけど、contextでのwinIdとは違うらしい
	local cdo_winid = vim.fn.win_getid()
	local cdo_bufnr = vim.fn.winbufnr(cdo_winid)
	vim.fn.execute("cdo " .. cmd)
	vim.fn.win_execute(cdo_winid, "buffer " .. cdo_bufnr)
	-- カーソルを元のウィンドウ(context)に戻す
	vim.fn.win_gotoid(args["context"]["winId"])
	return 0
end)

vim.fn["ddu#custom#action"]('kind', 'file', 'grep', function(args)
	local path = args["items"][1]["action"]["path"]
	local directory = vim.fn.isdirectory(path) and path or vim.fn.fnamemodify(path, ":h")
	vim.fn["ddu#start"]({
		name = args["options"]["name"],
		push = true,
		sources = {
			{
				name = "rg",
				params = {
					path = directory,
					input = vim.fn.input("Pattern: ")
				}
			}
		}
	})
	return 0
end)

vim.fn["ddu#custom#action"]('source', 'file', 'file_rec', function(args)
	local items = args["items"]
	local action = items[1]["action"]
	vim.fn["ddu#start"]({
		sources = {
			{ name = "file_rec", options = { path = action["path"] } }
		}
	})
	return 0
end)

vim.fn["ddu#custom#action"]('kind', 'lsp', 'setBreakPoint', function(args)
	for _, item in ipairs(args["items"]) do
		local action = item["action"]
		local lnum = action["lnum"]
		vim.fn.execute(lnum)
		require("dap").set_breakpoint()
	end
	return 0
end)

vim.fn["ddu#custom#action"]('source', 'buffer', 'delete', function(args)
	for _, item in ipairs(args["items"]) do
		local action = item["action"]
		local bufNr = action["bufNr"]
		vim.fn.execute("bdelete " .. bufNr)
	end
	return 0
end)

vim.fn["ddu#custom#action"]('source', 'dein', 'gh view', function(args)
	for _, item in ipairs(args["items"]) do
		local action = item["action"]
		local path = action["path"]
		local repoPath = vim.fn.split(path, "/")
		local repo = repoPath[#repoPath - 1] .. "/" .. repoPath[#repoPath]
		vim.system({ "gh", "repo", "view", repo, "--web" })
	end
	return 0
end)

vim.fn["ddu#custom#action"]('source', 'register', 'trimCRLF', function(args)
	for _, item in ipairs(args["items"]) do
		local regName = item["word"][0]
		local action = item["action"]
		-- local regType = action["regType"]
		local regText = action["text"]
		vim.fn.setreg(regName, vim.fn.substitute(regText, "\r", "", "g"))
	end
	return 1
end)

vim.fn["ddu#custom#action"]('ui', 'ff', 'kensaku', function(args)
	local sources = args["options"]["sources"]
	for _, source in ipairs(sources) do
		if source["name"] ~= "dummy" then
			local options = source["options"]
			local converters = nil
			if options ~= nil then
				converters = options["converters"]
			end
			source["options"] = {
				matchers = { "matcher_kensaku" },
				sorters = {},
				converters = converters,
			}
		end
	end
	vim.fn["ddu#ui#do_action"]('updateOptions', {
		uiParams = {
			ff = {
				filterFloatingTitle = { { "日本語検索", "LightBlue" } },
				filterFloatingTitlePos = "center",
			}
		},
		sources = sources
	})
	vim.fn["ddu#ui#do_action"]('redraw', { method = "uiRedraw" })
	return 0 -- Don't Redraw again
end)

-- dduをpushして、shellでのpipeっぽいことをやる
vim.fn["ddu#custom#action"]('ui', 'ff', 'pipe', function(args)
	local current = vim.fn["ddu#custom#get_current"]()
	print(vim.inspect(current["sourceOptions"]))
	local context = vim.fn["ddu#get_context"](current["name"])
	local input = context["input"] or ""
	local beforeSources = args["options"]["sources"]
	local afterSources = {}
	local items = vim.fn["ddu#ui#get_items"]()
	for _, source in ipairs(beforeSources) do
		local s = {}
		s["name"] = "custom_params"
		s["options"] = source["options"]
		-- itemのうち__sourceName別に分ける
		s["params"] = {
			items = vim.tbl_filter(function(item)
				return item["__sourceName"] == source["name"]
			end, items)
		}
		if source["name"] == "rg" then
			s["options"]["matchers"] = { "converter_display_word", "matcher_fzf" }
		end
		table.insert(afterSources, s)
	end
	local begoreTitle = current["uiParams"]["ff"]["filterFloatingTitle"] or ""
	local title = ""
	if begoreTitle ~= "" then
		title = begoreTitle .. " | " .. input
	else
		title = input
	end
	vim.fn["ddu#start"]({
		push = true,
		name = current["name"],
		sources = afterSources,
		uiParams = {
			ff = {
				filterFloatingTitle = title,
			}
		}
	})
	return 0
end)

-- ddu key mapping

vim.keymap.set('n', '[ddu]', '<Nop>')
vim.keymap.set('n', '<Space>u', '[ddu]', { remap = true })

-- telescopeのREADMEの順っぽく設定

-- file周り
vim.keymap.set('n', '[ddu]f', function()
	vim.fn["ddu#start"]({
		ui = "ff",
		uiParams = {
			ff = {
				startFilter = true,
				floatingTitle = { { "Filter", "FloatBorder" } },
				autoAction = { name = 'preview' },
				startAutoAction = true,
			}
		},
		sources = {
			{ name = "file_rec", params = {} }
		}
	})
end, { remap = true })
vim.keymap.set('n', '[ddu]g', function()
	vim.fn["ddu#start"]({
		ui = "ff",
		uiParams = {
			ff = {
				startFilter = true,
				floatingTitle = { { "Files", "FloatBorder" }, { "Git", "FloatBorder" } },
				autoAction = { name = 'preview' },
				startAutoAction = true,
			}
		},
		sources = {
			{
				name = "file_external",
				params = { cmd = { "git", "ls-files" } }
			}
		}
	})
end, { remap = true })
vim.keymap.set('n', '[ddu]r', function()
	vim.fn["ddu#start"]({
		ui = "ff",
		name = "ui_filter_preview_horizontal_top_layout",
		uiParams = {
			ff = {
				ignoreEmpty = false,
				autoResize = false,
				floatingTitle = { { "Live Grep", "String" } }
			}
		},
		sources = {
			{
				name = "rg",
				options = { matchers = {}, volatile = true }
			}
		}
	})
end, { remap = true })

-- vim周り
vim.keymap.set('n', '[ddu]b', function()
	vim.fn["ddu#start"]({
		ui = "ff",
		name = "ui_filter_preview_layout",
		uiParams = {
			ff = {
				floatingTitle = { { "Buffers", "Blue" } },
			}
		},
		sources = {
			{ name = "buffer" }
		}
	})
end, { remap = true })
vim.keymap.set('n', '[ddu]c', function()
	vim.fn["ddu#start"]({
		ui = "ff",
		uiParams = {
			ff = {
				startFilter = true,
				floatingTitle = { { "Command History", "FloatBorder" } },
				autoAction = {}
			}
		},
		sources = {
			{ name = "command_history" }
		}
	})
end, { remap = true })
vim.keymap.set('n', '[ddu]h', function()
	vim.fn["ddu#start"]({
		ui = "ff",
		name = "ui_filter_preview_horizontal_top_layout",
		uiParams = {
			ff = {
				floatingTitle = { { "Help", "FloatBorder" } },
			}
		},
		sources = {
			{ name = "help" }
		}
	})
end, { remap = true })
vim.keymap.set('n', '[ddu]q', function()
	vim.fn["ddu#start"]({
		ui = "ff",
		name = "ui_filter_preview_horizontal_top_layout",
		uiParams = {
			ff = {
				floatingTitle = { { "QuickFix", "FloatBorder" } },
			}
		},
		sources = {
			{ name = "qf", params = { isSubset = true, format = "%p|%t" } }
		}
	})
end, { remap = true })
vim.keymap.set('n', '[ddu]j', function()
	vim.fn["ddu#start"]({
		ui = "ff",
		name = "ui_filter_preview_horizontal_layout",
		uiParams = {
			ff = {
				floatingTitle = { { "JumpList", "FloatBorder" } },
			}
		},
		sources = {
			{ name = "jumplist" }
		}
	})
end, { remap = true })
vim.keymap.set('n', '[ddu]t', function()
	vim.fn["ddu#start"]({
		ui = "ff",
		uiParams = {
			ff = {
				floatingTitle = { { "Tab", "FloatBorder" } },
				autoAction = {
					name = "preview",
					params = { border = { "+", "-", "+", "|" } }
				}
			}
		},
		sources = {
			{ name = "tab", params = { format = "tab|%n|%T:%w" } }
		}
	})
end, { remap = true })
vim.keymap.set('n', '[ddu]w', function()
	vim.fn["ddu#start"]({
		ui = "ff",
		name = "ui_filter_preview_horizontal_top_layout",
		uiParams = {
			ff = {
				floatingTitle = { { "Window", "FloatBorder" } },
				autoAction = {
					name = "preview",
				}
			}
		},
		sources = {
			{
				name = "window",
				options = {
					columns = {
						{ name = "window", params = { format = "tab %tn " } },
						{ name = "window", params = { format = " %w" } },
						{ name = "window", params = { format = " %w" } },
						{ name = "window", params = { format = " %wi" } },
					},
					converters = { "converter_display_word", "matcher_fzf" }
				},
			}
		},
	})
end, { remap = true })
vim.keymap.set('n', '[ddu]L', function()
	vim.fn["ddu#start"]({
		ui = "ff",
		name = "ui_filter_preview_horizontal_layout",
		uiParams = {
			ff = {
				floatingTitle = { { "Line", "FloatBorder" } },
				previewWindowOptions = { { "&signcolumn", "no" }, { "&wrap", 0 }, { "&number", 0 },
					{ "&relativenumber", 1 } }
			}
		},
		sources = {
			{ name = "line" }
		}
	})
end, { remap = true })

-- lsp
vim.keymap.set('n', '[ddu]lr', function()
	vim.fn["ddu#start"]({
		ui = "ff",
		name = "ui_filter_preview_horizontal_top_layout",
		uiParams = {
			ff = {
				floatingTitle = { { "Lsp References", "FloatBorder" } },
			}
		},
		sources = {
			{ name = "dummy",            params = { display = ">>lsp references<<" } },
			{ name = "lsp_references" },
			{ name = "dummy",            params = { display = ">>anyjump<<" } },
			{ name = "anyjump_reference" }
		}
	})
end, { remap = true })
vim.keymap.set('n', '[ddu]ld', function()
	vim.fn["ddu#start"]({
		ui = "ff",
		name = "ui_filter_preview_horizontal_top_layout",
		uiParams = {
			ff = {
				floatingTitle = { { "Lsp Definition", "FloatBorder" } },
			}
		},
		sources = {
			{
				name = "dummy",
				options = {
					converters = {
						{ name = "converter_highlight", params = { hl_group = "Red" } }
					}
				},
				params = { display = ">>Definition<<" }
			},
			{ name = "lsp_definition", params = { method = "textDocument/definition" } },
			{
				name = "dummy",
				options = {
					converters = {
						{ name = "converter_highlight", params = { hl_group = "Blue" } }
					}
				},
				params = { display = ">>typeDefinition<<" }
			},
			{ name = "lsp_definition", params = { method = "textDocument/typeDefinition" } },
			{
				name = "dummy",
				options = {
					converters = {
						{ name = "converter_highlight", params = { hl_group = "Yellow" } }
					}
				},
				params = { display = ">>declaration<<" }
			},
			{ name = "lsp_definition", params = { method = "textDocument/declaration" } },
			{
				name = "dummy",
				options = {
					converters = {
						{ name = "converter_highlight", params = { hl_group = "Green" } }
					}
				},
				params = { display = ">>Implementation<<" }
			},
			{ name = "lsp_definition", params = { method = "textDocument/implementation" } },
			{
				name = "dummy",
				options = {
					converters = {
						{ name = "converter_highlight", params = { hl_group = "Black" } }
					}
				},
				params = { display = ">>any jump<<" }
			},
			{ name = "anyjump_definition" },
		}
	})
end, { remap = true })
vim.keymap.set('n', '[ddu]ls', function()
	vim.fn["ddu#start"]({
		ui = "ff",
		name = "ui_filter_preview_horizontal_layout",
		uiParams = {
			ff = {
				floatingTitle = { { "Lsp Symbol", "FloatBorder" } },
				displayTree = true,
			}
		},
		sources = {
			{ name = "dummy",              params = { display = "documentSymbol" } },
			{
				name = "lsp_documentSymbol",
				options = {
					converters = {
						{
							name = "converter_lsp_symbol",
							params = {
								iconMap = {
									["File"] = "",
									["Module"] = "",
									["Namespace"] = "",
									["Package"] = "",
									["Class"] = "",
									["Method"] = "",
									["Property"] = "",
									["Field"] = "",
									["Constructor"] = "",
									["Enum"] = "",
									["Interface"] = "",
									["Function"] = "",
									["Variable"] = "",
									["Constant"] = "",
									["String"] = "",
									["Number"] = "",
									["Boolean"] = "",
									["Array"] = "",
									["Object"] = "",
									["Key"] = "",
									["Null"] = "",
									["EnumMember"] = "",
									["Struct"] = "",
									["Event"] = "",
									["Operator"] = "",
									["TypeParameter"] = "",
								}
							}
						}
					}
				}
			},
			{ name = "dummy",              params = { display = "workspaceSymbol" } },
			{ name = "lsp_workspaceSymbol" },
		}
	})
end, { remap = true })
vim.keymap.set('n', '[ddu]lh', function()
	vim.fn["ddu#start"]({
		ui = "ff",
		name = "ui_filter_preview_layout",
		uiParams = {
			ff = {
				floatingTitle = { { "Lsp Hierarchy", "FloatBorder" } },
				displayTree = true,
				startFilter = false
			}
		},
		sources = {
			{ name = "dummy",             params = { display = "incomingCalls" } },
			{ name = "lsp_callHierarchy", params = { method = "callHierarchy/incomingCalls" } },
			{ name = "dummy",             params = { display = "outgoingCalls" } },
			{ name = "lsp_callHierarchy", params = { method = "callHierarchy/outgoingCalls" } },
		}
	})
end, { remap = true })

-- 他プラグインとの連携
vim.keymap.set('n', '[ddu]T', function()
	vim.fn["ddu#start"]({
		ui = "ff",
		name = "ui_filter_preview_horizontal_layout",
		uiParams = {
			ff = {
				floatingTitle = { { "Floaterm", "FloatBorder" } },
				startFilter = false,
			}
		},
		sources = {
			{ name = "floaterm" },
		}
	})
end, { remap = true })
vim.keymap.set('n', '[ddu]d', function()
	vim.fn["ddu#start"]({
		ui = "ff",
		name = "ui_filter_layout",
		uiParams = {
			ff = {
				floatingTitle = { { "Dein", "Black" } },
				autoAction = {}
			}
		},
		sources = {
			{ name = "dein" },
		}
	})
end, { remap = true })
vim.keymap.set('n', '[ddu]v<CR>', function()
	vim.fn["ddu#start"]({
		ui = "ff",
		name = "ui_filter_preview_layout",
		sources = {
			{ name = "channel_rec" },
		}
	})
end, { remap = true })
vim.keymap.set('n', '[ddu]ve<CR>', function()
	vim.fn["ddu#start"]({
		ui = "filer",
		uiParams = {
			filer = {
				displayRoot = false,
			},
		},
		sources = {
			{ name = "dummy", params = { display = "未読チャンネル" } },
			{ name = "channel_rec", params = { type = "unread" } },
			{ name = "dummy", params = { display = "チャンネルツリー" } },
			{
				name = "channel",
				options = {
					columns = { "channel" }
				}
			},
		},
	})
end, { remap = true })
vim.keymap.set('n', '[ddu]vu<CR>', function()
	vim.fn["ddu#start"]({
		ui = "ff",
		name = "ui_filter_preview_layout",
		sources = {
			{ name = "channel_rec", params = { type = "unread" } },
		}
	})
end, { remap = true })

-- filer
vim.keymap.set('n', '[ddu]e', function()
	vim.fn["ddu#start"]({
		ui = "filer",
		resume = true,
		uiParams = {
			filer = {
				displayRoot = false,
				split = "floating",
				splitDirection = "topleft",
				previewFloating = true
			}
		},
		sources = {
			{
				name = "dummy",
				params = {
					display = "開いてるエディター",
					hlGroup = "String"
				}
			},
			{
				name = "tab",
				options = { columns = { "tab_column" } },
			},
			{
				name = "dummy",
				params = {
					display = string.gsub(vim.fn.getcwd(), vim.fn.getenv("HOME"), "~"),
					hlGroup = "String"
				}
			},
			{
				name = "file",
				options = {
					columns = { "icon_filename", "file_git_status", "file_buf_modified" }
				}
			}
		},
	})
	update_ui_layout()
end, { remap = true })

vim.keymap.set('n', '[ddu]E', function()
	vim.fn["ddu#start"]({
		ui = "ff",
		uiParams = {
			ff = {
				startFilter = true,
				floatingTitle = { { "File", "FloatBorder" }, { "Browser", "Directory" } },
			}
		},
		sources = {
			{
				name = "file",
				options = {
					columns = { "icon_filename" },
					converters = { "converter_file_git_status", "converter_file_info" }
				}
			}
		},
	})
end, { remap = true })
'''

[[plugins]]
repo = 'Shougo/ddu-ui-ff'
on_source = 'ddu.vim'
# hooks_file = 'nvim/ddu-ui-ff.vim'
[plugins.ftplugin]
lua_ddu-ff = '''
vim.opt_local.cursorline = true
vim.opt_local.signcolumn = 'yes'

vim.keymap.set('n', '<CR>', function()
	vim.fn["ddu#ui#do_action"]('itemAction')
end, { buffer = true })
vim.keymap.set('n', 't', function()
	vim.fn["ddu#ui#do_action"]('itemAction', { params = { command = "tabnew" } })
end, { buffer = true })
vim.keymap.set('n', 'o', function()
	vim.fn["ddu#ui#do_action"]('itemAction', { params = { command = "split" } })
end, { buffer = true })
vim.keymap.set('n', 'v', function()
	vim.fn["ddu#ui#do_action"]('itemAction', { params = { command = "vsplit" } })
end, { buffer = true })
vim.keymap.set('n', '<C-j>', function()
	vim.fn["ddu#ui#do_action"]('kensaku')
end, { buffer = true })
vim.keymap.set('n', '|', function()
	vim.fn["ddu#ui#do_action"]('pipe')
end, { buffer = true })
vim.keymap.set('n', 'a', function()
	vim.fn["ddu#ui#do_action"]('chooseAction')
end, { buffer = true })
vim.keymap.set('n', 's', function()
	vim.fn["ddu#ui#do_action"]('toggleSelectItem')
end, { buffer = true })
vim.keymap.set('n', 'i', function()
	vim.fn["ddu#ui#do_action"]('openFilterWindow')
end, { buffer = true })
vim.keymap.set('n', 'c', function()
	vim.fn["ddu#ui#do_action"]('closeFilterWindow')
end, { buffer = true })
vim.keymap.set('n', 'p', function()
	vim.fn["ddu#ui#do_action"]('preview')
end, { buffer = true })
vim.keymap.set('n', 'e', function()
	vim.fn["ddu#ui#do_action"]('expandItem', { mode = "toggle", maxLevel = vim.v.count })
end, { buffer = true })
vim.keymap.set('n', 'q', function()
	vim.fn["ddu#ui#do_action"]('quit')
end, { buffer = true })
vim.keymap.set('n', '-', function()
	local sourceName = vim.fn["ddu#ui#get_item"]()["__sourceName"]
	if sourceName == "file" then
		vim.fn["ddu#ui#do_action"]('itemAction', {
			name = "narrow",
			params = { path = ".." }
		})
	end
end, { buffer = true })

vim.api.nvim_create_autocmd({ "CursorMoved" }, {
	buffer = 0,
	callback = function()
		vim.fn.sign_unplace('', { id = 100 })
		vim.fn.sign_define("cursor", { text = ">>", texthl = "Constant" })
		vim.fn.sign_place(100, '', "cursor", vim.fn.bufnr('%'), { lnum = vim.fn.line('.') })
	end
})
'''
lua_ddu-ff-filter = '''
vim.keymap.set('n', '<CR>', function()
	vim.fn["ddu#ui#do_action"]('itemAction')
end, { buffer = true })
vim.keymap.set('n', 'q', function()
	vim.fn["ddu#ui#do_action"]('quit')
end, { buffer = true })
vim.keymap.set('i', '<CR>', function()
	if vim.fn["ddu#ui#get_item"]()["__sourceName"] == "file" and
		vim.fn["ddu#ui#get_item"]()["action"]["isDirectory"] == true then
		vim.fn["ddu#ui#do_action"]('itemAction', { name = "narrow" })
	else
		vim.fn["ddu#ui#do_action"]('itemAction')
	end
end, { buffer = true })
vim.keymap.set('i', '<C-p>', function()
	vim.fn["ddu#ui#do_action"]('preview')
end, { buffer = true })
vim.keymap.set('i', '<C-t>', function()
	vim.fn["ddu#ui#do_action"]('itemAction', { params = { command = "tabnew" } })
end, { buffer = true })
vim.keymap.set('i', '<C-o>', function()
	vim.fn["ddu#ui#do_action"]('itemAction', { params = { command = "split" } })
end, { buffer = true })
vim.keymap.set('i', '<C-v>', function()
	vim.fn["ddu#ui#do_action"]('itemAction', { params = { command = "vsplit" } })
end, { buffer = true })
vim.keymap.set('i', '<C-n>', function()
	vim.fn["ddu#ui#do_action"]("cursorNext")
end, { buffer = true })
vim.keymap.set('i', '<C-p>', function()
	vim.fn["ddu#ui#do_action"]("cursorPrevious")
end, { buffer = true })
vim.keymap.set('i', '<C-s>', function()
	vim.fn["ddu#ui#do_action"]("toggleSelectItem")
end, { buffer = true })
vim.keymap.set('i', '<C-a>', function()
	vim.fn["ddu#ui#do_action"]("toggleAllItems")
end, { buffer = true })
vim.keymap.set('i', '<C-l>', '<Esc><Cmd>call ddu#ui#do_action("leaveFilterWindow")<CR>', { buffer = true })
vim.keymap.set('i', '<C-j>', '<Esc><Cmd>call ddu#ui#do_action("kensaku")<CR>', { buffer = true })
vim.keymap.set('i', '<C-q>', function()
	vim.fn["ddu#ui#do_action"]("quit")
end, { buffer = true })
'''

[[plugins]]
repo = 'Shougo/ddu-ui-filer'
on_source = 'ddu.vim'
[plugins.ftplugin]
lua_ddu-filer = '''
vim.opt_local.cursorline = true
vim.keymap.set('n', '<CR>', function()
	local item = vim.fn["ddu#ui#get_item"]()
	if item["isTree"] ~= nil and item["isTree"] then
		vim.fn["ddu#ui#do_action"]('expandItem', { mode = 'toggle' })
	else
		vim.fn["ddu#ui#do_action"]('itemAction')
	end
end, { buffer = true })
vim.keymap.set('n', 'e', function()
	vim.fn["ddu#ui#do_action"]('expandItem', { mode = 'toggle', maxLevel = vim.v.count })
end, { buffer = true })
vim.keymap.set('n', 'p', function()
	vim.fn["ddu#ui#do_action"]('togglePreview')
end, { buffer = true })
vim.keymap.set('n', 's', function()
	vim.fn["ddu#ui#do_action"]('toggleSelectItem')
end, { buffer = true })
vim.keymap.set('n', 'o', function()
	vim.fn["ddu#ui#do_action"]('itemAction', { name = 'open', params = { command = 'split' } })
end, { buffer = true })
vim.keymap.set('n', 'v', function()
	vim.fn["ddu#ui#do_action"]('itemAction', { name = 'open', params = { command = 'vsplit' } })
end, { buffer = true })
vim.keymap.set('n', 't', function()
	vim.fn["ddu#ui#do_action"]('itemAction', { name = 'open', params = { command = 'tabnew' } })
end, { buffer = true })
vim.keymap.set('n', 'a', function()
	vim.fn["ddu#ui#do_action"]('chooseAction')
end, { buffer = true })
vim.keymap.set('n', '%', function()
	vim.fn["ddu#ui#do_action"]('itemAction', { name = 'newFile' })
end, { buffer = true })
vim.keymap.set('n', 'd', function()
	vim.fn["ddu#ui#do_action"]('itemAction', { name = 'newDirectory' })
end, { buffer = true })
vim.keymap.set('n', 'R', function()
	vim.fn["ddu#ui#do_action"]('itemAction', { name = 'rename' })
end, { buffer = true })
vim.keymap.set('n', 'q', function()
	vim.fn["ddu#ui#do_action"]('quit')
end, { buffer = true })
'''

# 補完Source

[[plugins]]
repo = 'Shougo/ddu-source-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file_old'
on_source = 'ddu.vim'

[[plugins]]
repo = 'flow6852/ddu-source-qf'
on_source = 'ddu.vim'

[[plugins]]
repo = 'shun/ddu-source-rg'
on_source = 'ddu.vim'

[[plugins]]
repo = 'shun/ddu-source-buffer'
on_source = 'ddu.vim'

[[plugins]]
repo = 'matsui54/ddu-vim-ui-select'
on_source = 'ddu.vim'

[[plugins]]
repo = 'matsui54/ddu-source-command_history'
on_source = 'ddu.vim'

[[plugins]]
repo = 'uga-rosa/ddu-source-lsp'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-line'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kamecha/ddu-source-jumplist'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-register'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kamecha/ddu-source-tab'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kamecha/ddu-source-floaterm'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kamecha/ddu-source-window'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kamecha/ddu-source-treesitter'
on_source = 'ddu.vim'

[[plugins]]
repo = 'matsui54/ddu-source-dein_update'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-dummy'
on_source = 'ddu.vim'

[[plugins]]
repo = 'matsui54/ddu-source-help'
on_source = 'ddu.vim'

[[plugins]]
repo = 'matsui54/ddu-source-file_external'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-action'
on_source = 'ddu.vim'

[[plugins]]
repo = 'yuki-yano/ddu-source-nvim-notify'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Omochice/ddu-source-anyjump'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kamecha/ddu-source-custom_params'
on_source = 'ddu.vim'

# 補完Filter
[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kamecha/ddu-filter-matcher_regex'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kamecha/ddu-filter-converter_highlight'
on_source = 'ddu.vim'

[[plugins]]
repo = 'yuki-yano/ddu-filter-fzf'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Milly/ddu-filter-kensaku'
depends = ['kensaku.vim']
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-filter-converter_display_word'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kamecha/ddu-filter-converter_file_icon'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kamecha/ddu-filter-converter_file_info'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kamecha/ddu-filter-converter_file_git_status'
on_source = 'ddu.vim'

# 補完Kind
[[plugins]]
repo = 'Shougo/ddu-kind-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-kind-word'
on_source = 'ddu.vim'

# カラム
[[plugins]]
repo = 'Shougo/ddu-column-filename'
on_source = 'ddu.vim'

# icon
[[plugins]]
repo = 'ryota2357/ddu-column-icon_filename'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kamecha/ddu-column-file_buf_modified'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kamecha/ddu-column-custom'
on_source = 'ddu.vim'

# command
[[plugins]]
repo = 'Shougo/ddu-commands.vim'
on_source = 'ddu.vim'
