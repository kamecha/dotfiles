# plugin manager
[[plugins]]
repo = 'Shougo/dein.vim'

# profile vim startup time
[[plugins]]
repo = 'dstein64/vim-startuptime'

# LSP
[[plugins]]
repo = 'neovim/nvim-lspconfig'
lua_source = '''
vim.lsp.handlers["textDocument/hover"] = vim.lsp.with(
	vim.lsp.handlers.hover, {
	   -- Use a sharp border with `FloatBorder` highlights
		border = "single",
	   -- add the title in hover float window
		title = "hover"
	}
)
vim.lsp.handlers["textDocument/signatureHelp"] = vim.lsp.with(
	vim.lsp.handlers.signature_help, {
	-- Use a sharp border with `FloatBorder` highlights
	border = "single"
	}
)
'''

[[plugins]]
repo = 'williamboman/mason.nvim'
lua_source = '''
require('mason').setup()
'''

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
depends = ['nvim-lspconfig', 'mason.nvim']
lua_source = '''
local nvim_lsp = require("lspconfig")
local mason_lspconfig = require('mason-lspconfig')
mason_lspconfig.setup_handlers({ function(server_name)
	local opts = {}
	nvim_lsp[server_name].setup(opts)
end })
'''

# LSPのラッパー
[[plugins]]
repo = 'jose-elias-alvarez/null-ls.nvim'
lua_source = '''
-- settting for null-ls to use textlint
local null_ls = require("null-ls")
null_ls.setup({
	sources = {
		null_ls.builtins.diagnostics.textlint.with({
			filetypes = { "markdown" },
			command = "textlint",
		})
	},
})
'''

# null-lsで使うらしい
[[plugins]]
repo = 'nvim-lua/plenary.nvim'

# インストールのUI
[[plugins]]
repo = 'j-hui/fidget.nvim'
lua_add = '''
vim.api.nvim_create_autocmd('LspAttach', {
	once = true,
	callback = function()
		require('fidget').setup({
			text = {
				spinner = 'moon',
			},
		})
	end,
})
'''
lua_source = '''
require('fidget').setup({})
'''

[[plugins]]
repo = 'folke/neodev.nvim'
lua_source = '''
require("neodev").setup({})
'''

# deno
[[plugins]]
repo = 'vim-denops/denops.vim'
on_event = 'CursorHold'

# ターミナルを良い感じにする
[[plugins]]
repo = 'akinsho/toggleterm.nvim'
rev = '*'

[[plugins]]
repo = 'voldikss/vim-floaterm'
hook_add = '''
let g:floaterm_width = 0.9
let g:floaterm_height = 0.9
nnoremap <silent> <F8> :FloatermNew<CR>
nnoremap <silent> <F9> :FloatermToggle<CR>
tnoremap <silent> <F9> <C-\><C-n>:FloatermToggle<CR>
'''

# AI補完
[[plugins]]
repo = 'github/copilot.vim'

# あいまい検索
[[plugins]]
repo = 'junegunn/fzf'
build_on = '''
./install -all
'''
merged = '0'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'

# help日本語
[[plugins]]
repo = 'vim-jp/vimdoc-ja'
hook_source = 'set helplang=ja,en'

# 翻訳
[[plugins]]
repo = '~/workspace/Plugin/denops-translate.vim'

# gccでコメントアウト
[[plugins]]
repo = 'numToStr/Comment.nvim'
lua_source = '''
require('Comment').setup()
'''

# 部分編集
[[plugins]]
repo = 'thinca/vim-partedit'

# ステータスライン
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
" 0: never 1: only split 2: always
set laststatus=2
let g:lightline = {
\	'colorscheme': 'edge',
\	'enable': {
\		'statusline': 1,
\		'tabline': 0,
\	},
\	'active': {
\		'left': [ ['mode', 'paste'], ['gitbranch', 'readonly', 'filename', 'skkeleton', 'modified'] ]
\	},
\	'component_function': {
\		'skkeleton': 'L_skkeleton_get_mode',
\		'gitbranch': 'gitbranch#name',
\	},
\}
'''

# タブライン
[[plugins]]
repo = 'nanozuki/tabby.nvim'
hook_add = '''
set showtabline=2
'''
lua_source = '''
require('tabby.tabline').use_preset('active_wins_at_tail', {
	tab_name = {
		name_fallback = function(tabid)
			return ""
		end
	},
})
'''

#  popup等の補助情報の表示
[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
depends = 'denops.vim'

# git branch
[[plugins]]
repo = 'itchyny/vim-gitbranch'

# カッコ補完
[[plugins]]
repo = 'cohama/lexima.vim'

# surround
[[plugins]]
repo = 'tpope/vim-surround'

# BadApple
[[plugins]]
repo = 'skanehira/badapple.vim'

# markdownのプレビュー
[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown', 'pandoc.markdown', 'rmd']
build = 'cd app && yarn install'

# colorのプレビュー
[[plugins]]
repo = 'gko/vim-coloresque'

# color scheme
[[plugins]]
repo = 'EdenEast/nightfox.nvim'

[[plugins]]
repo = 'sainnhe/edge'
hook_add = '''
if has('termguicolors')
	set termguicolors
endif
let g:edge_style = 'aura'
let g:edge_better_performance = 1
'''

# ソースコードを画像化する
[[plugins]]
repo = 'skanehira/denops-silicon.vim'
depends = 'denops.vim'

# UI
[[plugins]]
repo = 'folke/noice.nvim'
depends = ['nui.nvim']
lua_source = '''
-- settting for nocie.vim
require('noice').setup {
	cmdline = {
		format = {
			cmdline = { icon = ">" },
			search_down = { icon = "🔍⌄" },
			search_up = { icon = "🔍⌃" },
			filter = { icon = "$" },
			lua = { icon = "☾" },
			help = { icon = "?" },
		},
	},
	popupmenu = {
		enabled = true,
		view = "nui",
	},
}
'''

# UI Component Library for Neovim
[[plugins]]
repo = 'MunifTanjim/nui.nvim'

# notification manager for Neovim
[[plugins]]
repo = 'rcarriga/nvim-notify'
on_lua = 'notify'
lua_source = '''
require('notify').setup({
	render = "minimal",
	timeout = 1000,
	})
vim.notify = require('notify')
'''

# tree-sitter
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
merged = '0'
lua_source = '''
require('nvim-treesitter.configs').setup {
	ensure_installed = { 'lua', 'vim' },
	highlight = {
		enable = true,
		disable = {
			"ddu-ff",
			"ddu-ff-filter",
		},
	},
	indent = {
		enable = true,
		disable = {
			"ddu-ff",
			"ddu-ff-filter",
			"html",
		},
	},
}
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-textobjects'
depends = 'nvim-treesitter'
lua_source = '''
require'nvim-treesitter.configs'.setup {
	textobjects = {
		select = {
			enable = true,
			lookahead = true,
			keymaps = {
				["af"] = "@function.outer",
				["if"] = "@function.inner",
				["ac"] = "@class.outer",
				["ic"] = "@class.inner",
			},
		},
	}
}
'''

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'sainnhe/edge'
hook_add = '''
if has('termguicolors')
	set termguicolors
endif
let g:edge_style = 'aura'
let g:edge_better_performance = 1
'''

# git
[[plugins]]
repo = 'lambdalisue/gina.vim'

# QuickFixを一括置換
[[plugins]]
repo = 'thinca/vim-qfreplace'

# QuickFixを編集
[[plugins]]
repo = 'itchyny/vim-qfedit'

# skkの辞書
[[plugins]]
repo = 'skk-dev/dict'

# <C-a> <C-x>を使い易くする
[[plugins]]
repo = 'monaqa/dial.nvim'
