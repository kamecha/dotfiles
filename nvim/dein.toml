# LSP
[[plugins]]
repo = 'neovim/nvim-lspconfig'

[[plugins]]
repo = 'williamboman/mason.nvim'
hooK_add = '''
lua require('mason').setup()
'''

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
depends = ['nvim-lspconfig', 'mason.nvim']
hook_source = '''
lua << EOF
local nvim_lsp = require("lspconfig")
local mason_lspconfig = require('mason-lspconfig')
mason_lspconfig.setup_handlers({ function(server_name)
	local opts = {}
	nvim_lsp[server_name].setup(opts)
end })
EOF
'''

# インストールのUI
[[plugins]]
repo = 'j-hui/fidget.nvim'
lua_add = '''
vim.api.nvim_create_autocmd('LspAttach', {
	once = true,
	callback = function()
		require('fidget').setup({
			text = {
				spinner = 'moon',
			},
		})
	end,
})
'''

[[plugins]]
repo = 'folke/neodev.nvim'
hook_source = '''
lua require("neodev").setup({})
'''

# deno
[[plugins]]
repo = 'vim-denops/denops.vim'

# 補完plugin
[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim']

# 補完UI
[[plugins]]
repo = 'Shougo/ddc-ui-native'
depends = ['denops.vim', 'ddc.vim']

# 補完source
[[plugins]]
repo = 'Shougo/ddc-around'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
depends = ['denops.vim', 'ddc.vim']

# 補完filter
[[plugins]]
repo = 'Shougo/ddc-matcher_head'

[[plugins]]
repo = '~/.vim/pack/plugins/start/ddc-matcher_lowerCamelCase'

[[plugins]]
repo = 'tani/ddc-fuzzy'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'

# スニペット
[[plugins]]
repo = 'hrsh7th/vim-vsnip'

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
depends = ['vim-vsnip']

# ターミナルを良い感じにする
[[plugins]]
repo = 'akinsho/toggleterm.nvim'
rev = '*'

# AI補完
[[plugins]]
repo = 'github/copilot.vim'

# あいまい検索
[[plugins]]
repo = 'junegunn/fzf'
build_on = '''
./install -all
'''
merged = '0'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'

# help日本語
[[plugins]]
repo = 'vim-jp/vimdoc-ja'
hook_source = 'set helplang=ja,en'

# SKK
[[plugins]]
repo = 'vim-skk/skkeleton'
depends = 'denops.vim'
hook_add = '''
call skkeleton#config({ 'globalJisyo': '~/dotfiles/SKK-JISYO.L' })
imap <C-j> <Plug>(skkeleton-enable)
cmap <C-j> <Plug>(skkeleton-enable)
function L_skkeleton_get_mode()
	if (mode() == 'i') && skkeleton#is_enabled()
		let skkeleton_mode = skkeleton#mode()
		if skkeleton_mode == 'hira'
			return 'あ'
		endif
		if skkeleton_mode == 'kata'
			return 'ア'
		endif
		if skkeleton_mode == 'hankata'
			return 'ｱ'
		endif
		if skkeleton_mode == 'zenkaku'
			return 'Ａ'
		endif
		if skkeleton_mode == 'abbrev'
			return 'A'
		endif
		return ''
	else
		return ''
	endif
endfunction
'''

# 翻訳
[[plugins]]
repo = '~/workspace/Plugin/denops-translate.vim'

# gccでコメントアウト
[[plugins]]
repo = 'tomtom/tcomment_vim'

# 概要表示
[[plugins]]
repo = 'liuchengxu/vista.vim'
hook_add = '''
function! NearestMethodOrFunction() abort
	return get(b:, 'vista_nearest_method_or_function', '')
endfunction
let g:vista_default_executive = 'vim_lsp'
'''

# 部分編集
[[plugins]]
repo = 'thinca/vim-partedit'

# ステータスライン
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
" 0: never 1: only split 2: always
set laststatus=2
let g:lightline = {
\	'colorscheme': 'edge',
\	'active': {
\		'left': [ ['mode', 'paste'], ['gitbranch', 'readonly', 'filename', 'skkeleton', 'modified', 'method'] ]
\	},
\	'component_function': {
\		'skkeleton': 'L_skkeleton_get_mode',
\		'gitbranch': 'gitbranch#name',
\		'method': 'NearestMethodOrFunction'
\	},
\}
'''

# git branch
[[plugins]]
repo = 'itchyny/vim-gitbranch'

# カッコ補完
[[plugins]]
repo = 'cohama/lexima.vim'

# surround
[[plugins]]
repo = 'tpope/vim-surround'

# BadApple
[[plugins]]
repo = 'skanehira/badapple.vim'

# markdownのプレビュー
[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown', 'pandoc.markdown', 'rmd']
build = 'cd app && yarn install'

# colorのプレビュー
[[plugins]]
repo = 'gko/vim-coloresque'

# # tree-sitter
# [[plugins]]
# repo = 'nvim-treesitter/nvim-treesitter'
# merged = '0'
# hook_add = '''
# lua << EOF
# require'nvim-treesitter.configs'.setup {
# 	ensure_installed = "maintained",
# 	highlight = {
# 		enable = true,
# 	},
# }
# EOF
# '''

# color scheme
[[plugins]]
repo = 'EdenEast/nightfox.nvim'

[[plugins]]
repo = 'sainnhe/edge'
hook_add = '''
if has('termguicolors')
	set termguicolors
endif
let g:edge_style = 'aura'
let g:edge_better_performance = 1
'''
